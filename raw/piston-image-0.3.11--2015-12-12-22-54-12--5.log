commit 35b6461b6e7419ef5b81d02dfe53172219103764
Merge: 1ddaf8b 5b9dd6a
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 13 01:53:06 2015 +0000

    Auto merge of #30310 - mbrubeck:doc-vec-bounds, r=steveklabnik
    
    r? @steveklabnik
    
    Currently neither the API docs nor the book clearly explain that out-of-bounds array indexing causes a panic.  Since this is fairly important and seems to surprise a number of new Rust programmers, I think it's worth adding to both places.  (But if you think it would be better to put this info in the API docs only, that's fine too.)
    
    Some specific things I'd like feedback on:
    
    * The new text here talks about panicking, which hasn't been formally introduced at this point in chapter 5 (though it has been mentioned in previous sections too).
    * Similarly the `Vec::get` example uses `Option<T>` which hasn't been fully introduced yet.  Should we leave out this example?
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.045; rss: 47MB	parsing
time: 0.017; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.004; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.119; rss: 55MB	expansion
time: 0.004; rss: 55MB	complete gated feature checking 1
time: 0.027; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.013; rss: 55MB	maybe building test harness
time: 0.012; rss: 55MB	prelude injection
time: 0.002; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 55MB	complete gated feature checking 2
time: 0.013; rss: 55MB	assigning node ids
time: 0.020; rss: 69MB	lowering ast -> hir
time: 0.006; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.007; rss: 71MB	early lint checks
time: 0.002; rss: 71MB	external crate/lib resolution
time: 0.001; rss: 71MB	language item collection
time: 0.028; rss: 96MB	resolution
time: 0.003; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.010; rss: 100MB	region resolution
time: 0.002; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.012; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.033; rss: 121MB	coherence checking
time: 0.026; rss: 124MB	wf checking (old)
time: 0.052; rss: 130MB	item-types checking
time: 1.697; rss: 161MB	item-bodies checking
time: 0.000; rss: 161MB	drop-impl checking
time: 0.139; rss: 161MB	wf checking (new)
time: 0.074; rss: 167MB	const checking
time: 0.012; rss: 167MB	privacy checking
time: 0.001; rss: 167MB	stability index
time: 0.010; rss: 167MB	intrinsic checking
time: 0.003; rss: 167MB	effect checking
time: 0.025; rss: 167MB	match checking
time: 0.095; rss: 177MB	MIR dump
time: 0.011; rss: 177MB	liveness checking
time: 0.151; rss: 177MB	borrow checking
time: 0.078; rss: 177MB	rvalue checking
time: 0.003; rss: 177MB	reachability checking
time: 0.009; rss: 177MB	death checking
time: 0.008; rss: 177MB	stability checking
time: 0.000; rss: 177MB	unused lib feature checking
time: 0.080; rss: 177MB	lint checking
time: 0.000; rss: 177MB	resolving dependency formats
time: 0.008; rss: 179MB	erasing regions from MIR
time: 2.877; rss: 294MB	translation
  time: 0.098; rss: 178MB	llvm function passes [0]
  time: 0.044; rss: 179MB	llvm module passes [0]
  time: 1.725; rss: 230MB	codegen passes [0]
  time: 0.001; rss: 197MB	codegen passes [0]
time: 2.073; rss: 197MB	LLVM passes
time: 0.152; rss: 198MB	linking
done
