commit f3e6d315386cebdd6679055d9350c258f2a51689
Merge: b1c9616 0be755c
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 15 03:21:30 2015 +0000

    Auto merge of #28351 - jonas-schievink:macro-bt, r=nrc
    
    The second commit in this PR will stop printing the macro definition site in backtraces, which cuts their length in half and increases readability (the definition site was only correct for local macros).
    
    The third commit will not print an invocation if the last one printed occurred at the same place (span). This will make backtraces caused by a self-recursive macro much shorter.
    
    (A possible alternative would be to capture the backtrace first, then limit it to a few frames at the start and end of the chain and print `...` inbetween. This would also work with multiple macros calling each other, which is not addressed by this PR - although the backtrace will still be halved)
    
    Example:
    ```rust
    macro_rules! m {
     ( 0 $($t:tt)* ) => ( m!($($t)*); );
     () => ( fn main() {0} );
    }
    
    m!(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0);
    ```
    
    On a semi-recent nightly, this yields:
    ```
    test.rs:3:21: 3:22 error: mismatched types:
     expected `()`,
        found `_`
    (expected (),
        found integral variable) [E0308]
    test.rs:3  () => ( fn main() {0} );
                                  ^
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:2:23: 2:34 note: expansion site
    test.rs:1:1: 4:2 note: in expansion of m!
    test.rs:6:1: 6:35 note: expansion site
    test.rs:3:21: 3:22 help: run `rustc --explain E0308` to see a detailed explanation
    error: aborting due to previous error
    ```
    
    After this patch:
    ```
    test.rs:3:21: 3:22 error: mismatched types:
     expected `()`,
        found `_`
    (expected (),
        found integral variable) [E0308]
    test.rs:3  () => ( fn main() {0} );
                                  ^
    test.rs:2:23: 2:34 note: in this expansion of m!
    test.rs:6:1: 6:35 note: in this expansion of m!
    test.rs:3:21: 3:22 help: run `rustc --explain E0308` to see a detailed explanation
    error: aborting due to previous error
    ```
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000; rss: 30MB	parsing
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 30MB	gated macro checking
time: 0.000; rss: 30MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.001; rss: 35MB	expansion
time: 0.000; rss: 35MB	complete gated feature checking 1
time: 0.000; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.000; rss: 35MB	maybe building test harness
time: 0.000; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 35MB	complete gated feature checking 2
time: 0.000; rss: 35MB	assigning node ids
time: 0.000; rss: 35MB	lowering ast -> hir
time: 0.000; rss: 35MB	indexing hir
time: 0.001; rss: 39MB	external crate/lib resolution
time: 0.000; rss: 39MB	language item collection
time: 0.001; rss: 43MB	resolution
time: 0.000; rss: 43MB	lifetime resolution
time: 0.000; rss: 43MB	looking for entry point
time: 0.000; rss: 43MB	looking for plugin registrar
time: 0.000; rss: 43MB	region resolution
time: 0.000; rss: 43MB	loop checking
time: 0.000; rss: 43MB	static item recursion checking
time: 0.000; rss: 43MB	type collecting
time: 0.000; rss: 43MB	variance inference
time: 0.004; rss: 51MB	coherence checking
time: 0.000; rss: 51MB	wf checking (old)
time: 0.000; rss: 51MB	item-types checking
time: 0.000; rss: 51MB	item-bodies checking
time: 0.000; rss: 51MB	drop-impl checking
time: 0.000; rss: 51MB	wf checking (new)
time: 0.000; rss: 51MB	MIR dump
time: 0.000; rss: 51MB	const checking
time: 0.000; rss: 51MB	privacy checking
time: 0.000; rss: 51MB	stability index
time: 0.000; rss: 51MB	intrinsic checking
time: 0.000; rss: 51MB	effect checking
time: 0.000; rss: 51MB	match checking
time: 0.000; rss: 51MB	liveness checking
time: 0.000; rss: 51MB	borrow checking
time: 0.000; rss: 51MB	rvalue checking
time: 0.000; rss: 51MB	reachability checking
time: 0.000; rss: 51MB	death checking
time: 0.000; rss: 51MB	stability checking
time: 0.000; rss: 51MB	unused lib feature checking
time: 0.000; rss: 51MB	lint checking
time: 0.001; rss: 51MB	resolving dependency formats
time: 0.004; rss: 63MB	translation
  time: 0.000; rss: 65MB	llvm function passes
  time: 0.000; rss: 65MB	llvm module passes
  time: 0.001; rss: 67MB	codegen passes
  time: 0.000; rss: 67MB	codegen passes
time: 0.002; rss: 67MB	LLVM passes
  time: 0.084; rss: 73MB	running linker
time: 0.084; rss: 73MB	linking
done
