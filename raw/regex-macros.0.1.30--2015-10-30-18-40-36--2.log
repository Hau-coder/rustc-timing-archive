commit 64b027764302aa67aa701a9f81bd938ca3d4052a
Merge: cc8d398 46068c9
Author: bors <bors@rust-lang.org>
Date:   Fri Oct 30 22:23:41 2015 +0000

    Auto merge of #29454 - stepancheg:vec-reserve, r=bluss
    
    Before this patch `reserve` function allocated twice as requested
    amount elements (not twice as capacity).  It leaded to unnecessary
    excessive memory usage in scenarios like this:
    
    ```
    let mut v = Vec::new();
    v.push(17);
    v.extend(0..10);
    println!("{}", v.capacity());
    ```
    
    `Vec` allocated 22 elements, while it could allocate just 11.
    
    `reserve` function must have a property of keeping `push` operation
    cost (which calls `reserve`) `O(1)`. To achieve this `reserve` must
    exponentialy grow its capacity when it does reallocation.
    
    There's better strategy to implement `reserve`:
    
    ```
    let new_capacity = max(current_capacity * 2, requested_capacity);
    ```
    
    This strategy still guarantees that capacity grows at `O(1)` with
    `reserve`, and fixes the issue with `extend`.
    
    Patch imlpements this strategy.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 29MB	parsing
time: 0.001; rss: 33MB	configuration 1
time: 0.000; rss: 33MB	recursion limit
time: 0.000; rss: 33MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.002; rss: 36MB	macro loading
time: 0.000; rss: 36MB	plugin loading
time: 0.000; rss: 36MB	plugin registration
time: 0.026; rss: 44MB	expansion
time: 0.001; rss: 44MB	complete gated feature checking 1
time: 0.007; rss: 44MB	configuration 2
time: 0.000; rss: 44MB	gated configuration checking
time: 0.004; rss: 44MB	maybe building test harness
time: 0.004; rss: 44MB	prelude injection
time: 0.000; rss: 44MB	checking that all macro invocations are gone
time: 0.000; rss: 44MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 44MB	complete gated feature checking 2
time: 0.004; rss: 44MB	assigning node ids
time: 0.003; rss: 48MB	lowering ast -> hir
time: 0.001; rss: 48MB	indexing hir
time: 0.000; rss: 48MB	attribute checking
time: 0.002; rss: 48MB	early lint checks
time: 0.046; rss: 86MB	external crate/lib resolution
time: 0.000; rss: 86MB	language item collection
time: 0.015; rss: 103MB	resolution
time: 0.000; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.002; rss: 105MB	region resolution
time: 0.000; rss: 105MB	loop checking
time: 0.000; rss: 105MB	static item recursion checking
time: 0.004; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.015; rss: 133MB	coherence checking
time: 0.000; rss: 133MB	wf checking (old)
time: 0.001; rss: 133MB	item-types checking
time: 1.042; rss: 168MB	item-bodies checking
time: 0.000; rss: 168MB	drop-impl checking
time: 0.005; rss: 168MB	wf checking (new)
time: 0.015; rss: 168MB	const checking
time: 0.003; rss: 168MB	privacy checking
time: 0.000; rss: 168MB	stability index
time: 0.001; rss: 168MB	intrinsic checking
time: 0.001; rss: 168MB	effect checking
time: 0.001; rss: 168MB	match checking
time: 0.025; rss: 179MB	MIR dump
time: 0.004; rss: 172MB	liveness checking
time: 0.039; rss: 171MB	borrow checking
time: 0.011; rss: 171MB	rvalue checking
time: 0.000; rss: 171MB	reachability checking
time: 0.002; rss: 171MB	death checking
time: 0.003; rss: 171MB	stability checking
time: 0.000; rss: 171MB	unused lib feature checking
time: 0.015; rss: 172MB	lint checking
time: 0.002; rss: 172MB	resolving dependency formats
time: 0.408; rss: 212MB	translation
  time: 0.033; rss: 164MB	llvm function passes [0]
  time: 0.013; rss: 164MB	llvm module passes [0]
  time: 0.739; rss: 184MB	codegen passes [0]
  time: 0.000; rss: 184MB	codegen passes [0]
time: 0.805; rss: 184MB	LLVM passes
  time: 0.002; rss: 184MB	altering regex-640d5d4018246dae.rlib
  time: 0.103; rss: 186MB	running linker
time: 0.106; rss: 184MB	linking
done
