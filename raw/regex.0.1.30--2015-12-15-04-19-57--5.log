commit 9e63cecb10a3a22abed9c230c5daf268dc258bf3
Merge: 8f031bf 915cb37
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 15 04:21:53 2015 +0000

    Auto merge of #30233 - retep998:where-in-the-world-is-windows-sdk, r=alexcrichton
    
    What I've done here is try to make the code match what vcvars does much more closely. It now chooses which SDK to find based on the version of MSVC that it found. It also bases the decision of whether to find all the things on whether `VCINSTALLDIR` has been set, which is more likely to have only been set by an invocation of vcvars, unlike previously where it would do some things only if `LIB` wasn't set even though there was a valid use case for libraries to add themselves to `LIB` without having invoked vcvars.
    
    There are still some debug `println!`s so people can test the PR and make sure it works correctly on various setups.
    
    It supports VS 2015, 2013, and 2012. People who want to use versions of VS older (or newer) than that will have to manually invoke the appropriate vcvars bat file to set the proper environment variables themselves.
    
    Do not merge yet.
    
    Fixes https://github.com/rust-lang/rust/issues/30229
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.054; rss: 47MB	parsing
time: 0.011; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.060; rss: 53MB	expansion
time: 0.001; rss: 53MB	complete gated feature checking 1
time: 0.014; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.006; rss: 53MB	maybe building test harness
time: 0.006; rss: 53MB	prelude injection
time: 0.000; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 53MB	complete gated feature checking 2
time: 0.007; rss: 53MB	assigning node ids
time: 0.009; rss: 61MB	lowering ast -> hir
time: 0.002; rss: 63MB	indexing hir
time: 0.000; rss: 63MB	attribute checking
time: 0.004; rss: 63MB	early lint checks
time: 0.001; rss: 63MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.008; rss: 73MB	resolution
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.005; rss: 77MB	region resolution
time: 0.001; rss: 77MB	loop checking
time: 0.001; rss: 77MB	static item recursion checking
time: 0.004; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.021; rss: 97MB	coherence checking
time: 0.005; rss: 97MB	wf checking (old)
time: 0.090; rss: 103MB	item-types checking
time: 0.212; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.011; rss: 114MB	wf checking (new)
time: 0.028; rss: 116MB	const checking
time: 0.004; rss: 116MB	privacy checking
time: 0.000; rss: 116MB	stability index
time: 0.001; rss: 116MB	intrinsic checking
time: 0.001; rss: 116MB	effect checking
time: 0.003; rss: 116MB	match checking
time: 0.015; rss: 122MB	MIR dump
time: 0.003; rss: 124MB	liveness checking
time: 0.020; rss: 124MB	borrow checking
time: 0.007; rss: 124MB	rvalue checking
time: 0.000; rss: 124MB	reachability checking
time: 0.003; rss: 124MB	death checking
time: 0.002; rss: 124MB	stability checking
time: 0.000; rss: 124MB	unused lib feature checking
time: 0.029; rss: 124MB	lint checking
time: 0.000; rss: 124MB	resolving dependency formats
time: 0.002; rss: 124MB	erasing regions from MIR
time: 0.670; rss: 189MB	translation
  time: 0.038; rss: 120MB	llvm function passes [0]
  time: 0.021; rss: 121MB	llvm module passes [0]
  time: 0.620; rss: 147MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 0.760; rss: 134MB	LLVM passes
time: 0.067; rss: 133MB	linking
done
