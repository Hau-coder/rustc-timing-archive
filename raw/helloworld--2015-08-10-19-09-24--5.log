commit 5aca49c693c9be3064d9e6db9473b1fa76834b79
Merge: 75383ea 7a3fdfb
Author: bors <bors@rust-lang.org>
Date:   Mon Aug 10 23:40:54 2015 +0000

    Auto merge of #27338 - alexcrichton:remove-morestack, r=brson
    
    This commit removes all morestack support from the compiler which entails:
    
    * Segmented stacks are no longer emitted in codegen.
    * We no longer build or distribute libmorestack.a
    * The `stack_exhausted` lang item is no longer required
    
    The only current use of the segmented stack support in LLVM is to detect stack
    overflow. This is no longer really required, however, because we already have
    guard pages for all threads and registered signal handlers watching for a
    segfault on those pages (to print out a stack overflow message). Additionally,
    major platforms (aka Windows) already don't use morestack.
    
    This means that Rust is by default less likely to catch stack overflows because
    if a function takes up more than one page of stack space it won't hit the guard
    page. This is what the purpose of morestack was (to catch this case), but it's
    better served with stack probes which have more cross platform support and no
    runtime support necessary. Until LLVM supports this for all platform it looks
    like morestack isn't really buying us much.
    
    cc #16012 (still need stack probes)
    Closes #26458 (a drive-by fix to help diagnostics on stack overflow)
    
    r? @brson
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000; rss: 30MB	parsing
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 34MB	gated macro checking
time: 0.000; rss: 34MB	crate injection
time: 0.002; rss: 34MB	macro loading
time: 0.000; rss: 34MB	plugin loading
time: 0.000; rss: 34MB	plugin registration
time: 0.001; rss: 34MB	expansion
time: 0.000; rss: 34MB	complete gated feature checking 1
time: 0.000; rss: 34MB	configuration 2
time: 0.000; rss: 38MB	maybe building test harness
time: 0.000; rss: 38MB	prelude injection
time: 0.000; rss: 38MB	checking that all macro invocations are gone
time: 0.000; rss: 38MB	complete gated feature checking 2
time: 0.000; rss: 38MB	assigning node ids and indexing ast
time: 0.000; rss: 38MB	external crate/lib resolution
time: 0.000; rss: 38MB	language item collection
time: 0.001; rss: 42MB	resolution
time: 0.000; rss: 42MB	lifetime resolution
time: 0.000; rss: 42MB	looking for entry point
time: 0.000; rss: 42MB	looking for plugin registrar
time: 0.000; rss: 42MB	region resolution
time: 0.000; rss: 42MB	loop checking
time: 0.000; rss: 42MB	static item recursion checking
time: 0.000; rss: 42MB	type collecting
time: 0.000; rss: 42MB	variance inference
time: 0.004; rss: 51MB	coherence checking
time: 0.001; rss: 51MB	type checking
time: 0.000; rss: 51MB	const checking
time: 0.000; rss: 51MB	privacy checking
time: 0.000; rss: 51MB	stability index
time: 0.000; rss: 51MB	intrinsic checking
time: 0.000; rss: 51MB	effect checking
time: 0.000; rss: 51MB	match checking
time: 0.000; rss: 51MB	liveness checking
time: 0.000; rss: 51MB	borrow checking
time: 0.000; rss: 51MB	rvalue checking
time: 0.000; rss: 51MB	reachability checking
time: 0.000; rss: 51MB	death checking
time: 0.000; rss: 51MB	stability checking
time: 0.000; rss: 51MB	unused lib feature checking
time: 0.000; rss: 51MB	lint checking
time: 0.000; rss: 51MB	resolving dependency formats
time: 0.004; rss: 63MB	translation
  time: 0.000; rss: 65MB	llvm function passes
  time: 0.000; rss: 65MB	llvm module passes
  time: 0.001; rss: 67MB	codegen passes
  time: 0.000; rss: 67MB	codegen passes
time: 0.002; rss: 67MB	LLVM passes
  time: 0.086; rss: 73MB	running linker
time: 0.087; rss: 72MB	linking
done
