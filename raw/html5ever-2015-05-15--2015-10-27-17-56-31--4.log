commit e0e262737478b695d115519f7856e475c17f84e1
Merge: 8a72584 99f9bb1
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 27 22:56:39 2015 +0000

    Auto merge of #29072 - nagisa:place-arrow, r=pnkfelix
    
    This commit generalises parsing of associative operators from left-associative
    only (with some ugly hacks to support right-associative assignment) to properly
    left/right-associative operators.
    
    Parsing is still is not general enough to handle non-associative,
    non-highest-precedence prefix or non-highest-precedence
    postfix operators (e.g. `..` range syntax) and should be made to be.
    
    Lastly, this commit adds support for parsing right-associative `<-` (left arrow)
    operator with precedence higher than assignment as the operator for placement-in
    feature.
    
    ---
    
    This PR still needs various non-parser changes (e.g. src/grammar and tests) and I’m still working on these; the meat of the PR can already be reviewed, though, I think.
    
    Please review carefully. I made sure that quirks I have discovered so far are preserved (see e.g. https://github.com/rust-lang/rust/issues/29071) and am looking for more corner cases as I continue to work on tests et al, but there may be something I haven’t noticed or accounted for.
    
    EDIT: I’m also not sure I managed to preserve all the semantics with the range operator inside non-trivial expressions since these are a mess at the moment. Crater runs would be nice.
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes
   Compiling html5ever v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
time: 0.018; rss: 39MB	parsing
time: 0.005; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.020; rss: 54MB	macro loading
time: 0.001; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.996; rss: 72MB	expansion
time: 0.004; rss: 72MB	complete gated feature checking 1
time: 0.026; rss: 72MB	configuration 2
time: 0.000; rss: 72MB	gated configuration checking
time: 0.014; rss: 72MB	maybe building test harness
time: 0.012; rss: 72MB	prelude injection
time: 0.002; rss: 72MB	checking that all macro invocations are gone
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 72MB	complete gated feature checking 2
time: 0.013; rss: 72MB	assigning node ids
time: 0.017; rss: 86MB	lowering ast -> hir
time: 0.007; rss: 90MB	indexing hir
time: 0.000; rss: 90MB	attribute checking
time: 0.010; rss: 90MB	early lint checks
time: 0.003; rss: 91MB	external crate/lib resolution
time: 0.003; rss: 91MB	language item collection
time: 0.033; rss: 109MB	resolution
time: 0.002; rss: 109MB	lifetime resolution
time: 0.000; rss: 109MB	looking for entry point
time: 0.001; rss: 109MB	looking for plugin registrar
time: 0.015; rss: 114MB	region resolution
time: 0.002; rss: 114MB	loop checking
time: 0.002; rss: 114MB	static item recursion checking
time: 0.008; rss: 116MB	type collecting
time: 0.003; rss: 116MB	variance inference
time: 0.038; rss: 133MB	coherence checking
time: 0.007; rss: 133MB	wf checking (old)
time: 0.322; rss: 163MB	item-types checking
time: 0.588; rss: 174MB	item-bodies checking
time: 0.000; rss: 174MB	drop-impl checking
time: 0.027; rss: 174MB	wf checking (new)
time: 0.077; rss: 174MB	const checking
time: 0.013; rss: 174MB	privacy checking
time: 0.001; rss: 174MB	stability index
time: 0.004; rss: 174MB	intrinsic checking
time: 0.003; rss: 174MB	effect checking
time: 0.027; rss: 174MB	match checking
time: 0.093; rss: 193MB	MIR dump
time: 0.012; rss: 183MB	liveness checking
time: 0.101; rss: 182MB	borrow checking
time: 0.040; rss: 182MB	rvalue checking
time: 0.003; rss: 182MB	reachability checking
time: 0.010; rss: 182MB	death checking
time: 0.007; rss: 182MB	stability checking
time: 0.000; rss: 182MB	unused lib feature checking
time: 0.056; rss: 181MB	lint checking
time: 0.000; rss: 181MB	resolving dependency formats
time: 0.478; rss: 225MB	translation
  time: 0.018; rss: 116MB	llvm function passes [0]
  time: 0.007; rss: 117MB	llvm module passes [0]
  time: 0.333; rss: 153MB	codegen passes [0]
  time: 0.001; rss: 129MB	codegen passes [0]
time: 0.415; rss: 129MB	LLVM passes
time: 0.058; rss: 129MB	linking
done
