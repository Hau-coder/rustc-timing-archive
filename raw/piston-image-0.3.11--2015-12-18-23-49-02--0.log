commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling gcc v0.3.21
   Compiling winapi-build v0.1.1
   Compiling lzw v0.8.0
   Compiling rustc-serialize v0.3.16
   Compiling libc v0.2.4
   Compiling color_quant v1.0.0
   Compiling bitflags v0.3.3
   Compiling byteorder v0.3.13
   Compiling winapi v0.2.5
   Compiling advapi32-sys v0.1.2
   Compiling glob v0.2.10
   Compiling gif v0.5.1
   Compiling rand v0.3.12
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.11
   Compiling num v0.1.29
   Compiling png v0.3.1
   Compiling enum_primitive v0.0.1
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.043; rss: 47MB	parsing
time: 0.017; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.005; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.119; rss: 56MB	expansion
time: 0.004; rss: 56MB	complete gated feature checking 1
time: 0.028; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.013; rss: 56MB	maybe building test harness
time: 0.012; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.012; rss: 56MB	assigning node ids
time: 0.021; rss: 69MB	lowering ast -> hir
time: 0.006; rss: 72MB	indexing hir
time: 0.000; rss: 72MB	attribute checking
time: 0.007; rss: 72MB	early lint checks
time: 0.002; rss: 72MB	external crate/lib resolution
time: 0.001; rss: 72MB	language item collection
time: 0.035; rss: 94MB	resolution
time: 0.003; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.017; rss: 99MB	region resolution
time: 0.001; rss: 99MB	loop checking
time: 0.001; rss: 99MB	static item recursion checking
time: 0.013; rss: 103MB	type collecting
time: 0.000; rss: 103MB	variance inference
time: 0.047; rss: 124MB	coherence checking
time: 0.136; rss: 127MB	wf checking
time: 0.054; rss: 131MB	item-types checking
time: 1.673; rss: 159MB	item-bodies checking
time: 0.000; rss: 159MB	drop-impl checking
time: 0.077; rss: 160MB	const checking
time: 0.011; rss: 160MB	privacy checking
time: 0.001; rss: 160MB	stability index
time: 0.010; rss: 160MB	intrinsic checking
time: 0.003; rss: 160MB	effect checking
time: 0.025; rss: 160MB	match checking
time: 0.122; rss: 172MB	MIR dump
time: 0.012; rss: 172MB	liveness checking
time: 0.156; rss: 173MB	borrow checking
time: 0.079; rss: 173MB	rvalue checking
time: 0.003; rss: 173MB	reachability checking
time: 0.009; rss: 173MB	death checking
time: 0.011; rss: 173MB	stability checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.085; rss: 173MB	lint checking
time: 0.000; rss: 173MB	resolving dependency formats
time: 0.012; rss: 174MB	erasing regions from MIR
time: 3.048; rss: 289MB	translation
  time: 0.097; rss: 176MB	llvm function passes [0]
  time: 0.043; rss: 176MB	llvm module passes [0]
  time: 1.739; rss: 227MB	codegen passes [0]
  time: 0.001; rss: 195MB	codegen passes [0]
time: 2.095; rss: 195MB	LLVM passes
time: 0.155; rss: 194MB	linking
done
