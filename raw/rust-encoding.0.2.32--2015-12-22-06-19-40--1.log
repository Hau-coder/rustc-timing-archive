commit 42c3ef8f9fd4b0dd1f881c49323bad456163f202
Merge: 5178449 cd74364
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 22 09:15:29 2015 +0000

    Auto merge of #30417 - alexcrichton:better-detect-elf-tls, r=alexcrichton
    
    Currently a compiler can be built with the `--disable-elf-tls` option for compatibility with OSX 10.6 which doesn't have ELF TLS. This is unfortunate, however, as a whole new compiler must be generated which can take some time. These commits add a new (feature gated) `cfg(target_thread_local)` annotation set by the compiler which indicates whether `#[thread_local]` is available for use. The compiler now interprets `MACOSX_DEPLOYMENT_TARGET` (a standard environment variable) to set this flag on OSX. With this we may want to start compiling our OSX nightlies with `MACOSX_DEPLOYMENT_TARGET` set to 10.6 which would allow the compiler out-of-the-box to generate 10.6-compatible binaries.
    
    For now the compiler still by default targets OSX 10.7 by allowing ELF TLS by default (e.g. if `MACOSX_DEPLOYMENT_TARGET` isn't set).
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 37MB	parsing
time: 0.006; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.046; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.007; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.004; rss: 46MB	maybe building test harness
time: 0.003; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 46MB	complete gated feature checking 2
time: 0.004; rss: 46MB	assigning node ids
time: 0.004; rss: 49MB	lowering ast -> hir
time: 0.001; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.008; rss: 60MB	resolution
time: 0.000; rss: 60MB	lifetime resolution
time: 0.000; rss: 60MB	looking for entry point
time: 0.000; rss: 60MB	looking for plugin registrar
time: 0.002; rss: 60MB	region resolution
time: 0.000; rss: 60MB	loop checking
time: 0.000; rss: 60MB	static item recursion checking
time: 0.005; rss: 60MB	type collecting
time: 0.000; rss: 60MB	variance inference
time: 0.019; rss: 81MB	coherence checking
time: 0.014; rss: 81MB	wf checking
time: 0.013; rss: 83MB	item-types checking
time: 0.193; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.011; rss: 96MB	const checking
time: 0.002; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.000; rss: 96MB	effect checking
time: 0.006; rss: 96MB	match checking
time: 0.018; rss: 102MB	MIR dump
time: 0.002; rss: 102MB	liveness checking
time: 0.022; rss: 102MB	borrow checking
time: 0.006; rss: 102MB	rvalue checking
time: 0.000; rss: 102MB	reachability checking
time: 0.002; rss: 102MB	death checking
time: 0.002; rss: 102MB	stability checking
time: 0.000; rss: 102MB	unused lib feature checking
time: 0.017; rss: 102MB	lint checking
time: 0.000; rss: 102MB	resolving dependency formats
time: 0.002; rss: 102MB	erasing regions from MIR
time: 0.361; rss: 157MB	translation
  time: 0.027; rss: 113MB	llvm function passes [0]
  time: 0.062; rss: 115MB	llvm module passes [0]
  time: 0.575; rss: 137MB	codegen passes [0]
  time: 0.001; rss: 135MB	codegen passes [0]
time: 0.734; rss: 135MB	LLVM passes
time: 0.054; rss: 135MB	linking
done
