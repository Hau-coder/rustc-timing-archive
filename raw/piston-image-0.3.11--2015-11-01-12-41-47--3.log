commit 71409184dc00604537ce03312dc17ba986c329d9
Merge: 6d43fef 0332ee9
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 1 17:15:29 2015 +0000

    Auto merge of #29177 - vadimcn:rtstuff, r=alexcrichton
    
    Note: for now, this change only affects `-windows-gnu` builds.
    
    So why was this `libgcc` dylib dependency needed in the first place?
    The stack unwinder needs to know about locations of unwind tables of all the modules loaded in the current process.  The easiest portable way of achieving this is to have each module register itself with the unwinder when loaded into the process.  All modules compiled by GCC do this by calling the __register_frame_info() in their startup code (that's `crtbegin.o` and `crtend.o`, which are automatically linked into any gcc output).
    Another important piece is that there should be only one copy of the unwinder (and thus unwind tables registry) in the process.  This pretty much means that the unwinder must be in a shared library (unless everything is statically linked).
    
    Now, Rust compiler tries very hard to make sure that any given Rust crate appears in the final output just once.   So if we link the unwinder statically to one of Rust's crates, everything should be fine.
    
    Unfortunately, GCC startup objects are built under assumption that `libgcc` is the one true place for the unwind info registry, so I couldn't find any better way than to replace them.  So out go `crtbegin`/`crtend`, in come `rsbegin`/`rsend`!
    
    A side benefit of this change is that rustc is now more in control of the command line that goes to the linker, so we could stop using `gcc` as the linker driver and just invoke `ld` directly.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.040; rss: 45MB	parsing
time: 0.014; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.001; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.004; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.104; rss: 53MB	expansion
time: 0.004; rss: 53MB	complete gated feature checking 1
time: 0.022; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.012; rss: 53MB	maybe building test harness
time: 0.011; rss: 53MB	prelude injection
time: 0.001; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 53MB	complete gated feature checking 2
time: 0.011; rss: 53MB	assigning node ids
time: 0.011; rss: 64MB	lowering ast -> hir
time: 0.006; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.007; rss: 69MB	early lint checks
time: 0.004; rss: 70MB	external crate/lib resolution
time: 0.002; rss: 70MB	language item collection
time: 0.039; rss: 91MB	resolution
time: 0.003; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.001; rss: 91MB	looking for plugin registrar
time: 0.010; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.012; rss: 97MB	type collecting
time: 0.003; rss: 97MB	variance inference
time: 0.039; rss: 114MB	coherence checking
time: 0.025; rss: 116MB	wf checking (old)
time: 0.049; rss: 116MB	item-types checking
time: 1.577; rss: 151MB	item-bodies checking
time: 0.000; rss: 151MB	drop-impl checking
time: 0.132; rss: 151MB	wf checking (new)
time: 0.078; rss: 153MB	const checking
time: 0.013; rss: 153MB	privacy checking
time: 0.000; rss: 153MB	stability index
time: 0.010; rss: 153MB	intrinsic checking
time: 0.003; rss: 153MB	effect checking
time: 0.024; rss: 153MB	match checking
time: 0.097; rss: 178MB	MIR dump
time: 0.012; rss: 163MB	liveness checking
time: 0.157; rss: 162MB	borrow checking
time: 0.095; rss: 162MB	rvalue checking
time: 0.003; rss: 162MB	reachability checking
time: 0.011; rss: 163MB	death checking
time: 0.008; rss: 163MB	stability checking
time: 0.000; rss: 163MB	unused lib feature checking
time: 0.073; rss: 163MB	lint checking
time: 0.000; rss: 163MB	resolving dependency formats
time: 2.853; rss: 281MB	translation
  time: 0.096; rss: 166MB	llvm function passes [0]
  time: 0.044; rss: 167MB	llvm module passes [0]
  time: 1.723; rss: 215MB	codegen passes [0]
  time: 0.001; rss: 183MB	codegen passes [0]
time: 2.066; rss: 183MB	LLVM passes
time: 0.154; rss: 183MB	linking
done
