commit 0250ff9a5f1347f3177516e178fd8382d48169c7
Merge: 014a5c1 7b464d3
Author: bors <bors@rust-lang.org>
Date:   Wed Jun 17 00:44:25 2015 +0000

    Auto merge of #22681 - mzabaluev:extend-faster, r=huonw
    
    Instead of a fast branch with a sized iterator falling back to a potentially poorly optimized iterate-and-push loop, a single efficient loop can serve all cases.
    
    In my benchmark runs, I see some good gains, but also some regressions, possibly due to different inlining choices by the compiler. YMMV.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023 	parsing
time: 0.007 	configuration 1
time: 0.000 	recursion limit
time: 0.000 	gated macro checking
time: 0.000 	crate injection
time: 0.002 	macro loading
time: 0.000 	plugin loading
time: 0.000 	plugin registration
time: 0.052 	expansion
time: 0.001 	complete gated feature checking 1
time: 0.008 	configuration 2
time: 0.004 	maybe building test harness
time: 0.004 	prelude injection
time: 0.000 	checking that all macro invocations are gone
time: 0.001 	complete gated feature checking 2
time: 0.005 	assigning node ids and indexing ast
time: 0.000 	external crate/lib resolution
time: 0.000 	language item collection
time: 0.012 	resolution
time: 0.000 	lifetime resolution
time: 0.000 	looking for entry point
time: 0.000 	looking for plugin registrar
time: 0.002 	region resolution
time: 0.000 	loop checking
time: 0.000 	static item recursion checking
time: 0.004 	type collecting
time: 0.000 	variance inference
time: 0.067 	coherence checking
time: 0.296 	type checking
time: 0.016 	const checking
time: 0.002 	privacy checking
time: 0.000 	stability index
time: 0.001 	intrinsic checking
time: 0.000 	effect checking
time: 0.005 	match checking
time: 0.002 	liveness checking
time: 0.027 	borrow checking
time: 0.009 	rvalue checking
time: 0.000 	reachability checking
time: 0.002 	death checking
time: 0.002 	stability checking
time: 0.000 	unused lib feature checking
time: 0.016 	lint checking
time: 0.000 	resolving dependency formats
time: 0.428 	translation
  time: 0.026 	llvm function passes
  time: 0.058 	llvm module passes
  time: 0.626 	codegen passes
  time: 0.001 	codegen passes
time: 0.786 	LLVM passes
time: 0.064 	linking
done
