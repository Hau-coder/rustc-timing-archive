commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling httparse v0.1.6
   Compiling lazy_static v0.1.15
   Compiling rustc-serialize v0.3.16
   Compiling winapi v0.2.5
   Compiling pkg-config v0.3.6
   Compiling traitobject v0.0.1
   Compiling bitflags v0.3.3
   Compiling libc v0.1.12
   Compiling unicase v0.1.0
   Compiling libc v0.2.4
   Compiling matches v0.1.2
   Compiling gcc v0.3.21
   Compiling typeable v0.1.2
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.1
   Compiling advapi32-sys v0.1.2
   Compiling log v0.3.4
   Compiling rand v0.3.12
   Compiling time v0.1.34
   Compiling num_cpus v0.2.10
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.037; rss: 41MB	parsing
time: 0.010; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.203; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.034; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
time: 0.011; rss: 57MB	assigning node ids
time: 0.019; rss: 62MB	lowering ast -> hir
time: 0.008; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.005; rss: 64MB	early lint checks
time: 0.003; rss: 65MB	external crate/lib resolution
time: 0.001; rss: 65MB	language item collection
time: 0.037; rss: 93MB	resolution
time: 0.002; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.006; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.014; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.053; rss: 119MB	coherence checking
time: 0.063; rss: 120MB	wf checking
time: 0.030; rss: 122MB	item-types checking
time: 0.540; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.047; rss: 139MB	const checking
time: 0.010; rss: 139MB	privacy checking
time: 0.001; rss: 139MB	stability index
time: 0.004; rss: 139MB	intrinsic checking
time: 0.002; rss: 139MB	effect checking
time: 0.013; rss: 139MB	match checking
time: 0.062; rss: 146MB	MIR dump
time: 0.006; rss: 146MB	liveness checking
time: 0.071; rss: 147MB	borrow checking
time: 0.035; rss: 147MB	rvalue checking
time: 0.007; rss: 147MB	reachability checking
time: 0.007; rss: 147MB	death checking
time: 0.007; rss: 147MB	stability checking
time: 0.000; rss: 147MB	unused lib feature checking
time: 0.048; rss: 147MB	lint checking
time: 0.000; rss: 147MB	resolving dependency formats
time: 0.012; rss: 148MB	erasing regions from MIR
time: 1.817; rss: 285MB	translation
  time: 0.098; rss: 185MB	llvm function passes [0]
  time: 0.050; rss: 185MB	llvm module passes [0]
  time: 1.678; rss: 230MB	codegen passes [0]
  time: 0.001; rss: 193MB	codegen passes [0]
time: 2.058; rss: 193MB	LLVM passes
time: 0.175; rss: 193MB	linking
done
