commit 35b6461b6e7419ef5b81d02dfe53172219103764
Merge: 1ddaf8b 5b9dd6a
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 13 01:53:06 2015 +0000

    Auto merge of #30310 - mbrubeck:doc-vec-bounds, r=steveklabnik
    
    r? @steveklabnik
    
    Currently neither the API docs nor the book clearly explain that out-of-bounds array indexing causes a panic.  Since this is fairly important and seems to surprise a number of new Rust programmers, I think it's worth adding to both places.  (But if you think it would be better to put this info in the API docs only, that's fine too.)
    
    Some specific things I'd like feedback on:
    
    * The new text here talks about panicking, which hasn't been formally introduced at this point in chapter 5 (though it has been mentioned in previous sections too).
    * Similarly the `Vec::get` example uses `Option<T>` which hasn't been fully introduced yet.  Should we leave out this example?
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes
time: 0.000; rss: 30MB	parsing
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 30MB	gated macro checking
time: 0.000; rss: 30MB	crate injection
time: 0.002; rss: 36MB	macro loading
time: 0.000; rss: 36MB	plugin loading
time: 0.000; rss: 36MB	plugin registration
time: 0.001; rss: 36MB	expansion
time: 0.000; rss: 36MB	complete gated feature checking 1
time: 0.000; rss: 36MB	configuration 2
time: 0.000; rss: 36MB	gated configuration checking
time: 0.000; rss: 36MB	maybe building test harness
time: 0.000; rss: 36MB	prelude injection
time: 0.000; rss: 36MB	checking that all macro invocations are gone
time: 0.000; rss: 36MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 36MB	complete gated feature checking 2
time: 0.000; rss: 36MB	assigning node ids
time: 0.000; rss: 36MB	lowering ast -> hir
time: 0.000; rss: 36MB	indexing hir
time: 0.000; rss: 36MB	attribute checking
time: 0.000; rss: 36MB	early lint checks
time: 0.001; rss: 36MB	external crate/lib resolution
time: 0.000; rss: 36MB	language item collection
time: 0.001; rss: 45MB	resolution
time: 0.000; rss: 45MB	lifetime resolution
time: 0.000; rss: 45MB	looking for entry point
time: 0.000; rss: 45MB	looking for plugin registrar
time: 0.000; rss: 45MB	region resolution
time: 0.000; rss: 45MB	loop checking
time: 0.000; rss: 45MB	static item recursion checking
time: 0.000; rss: 45MB	type collecting
time: 0.000; rss: 45MB	variance inference
time: 0.004; rss: 53MB	coherence checking
time: 0.000; rss: 53MB	wf checking (old)
time: 0.000; rss: 53MB	item-types checking
time: 0.000; rss: 53MB	item-bodies checking
time: 0.000; rss: 53MB	drop-impl checking
time: 0.000; rss: 53MB	wf checking (new)
time: 0.000; rss: 53MB	const checking
time: 0.000; rss: 53MB	privacy checking
time: 0.000; rss: 53MB	stability index
time: 0.000; rss: 53MB	intrinsic checking
time: 0.000; rss: 53MB	effect checking
time: 0.000; rss: 53MB	match checking
time: 0.000; rss: 53MB	MIR dump
time: 0.000; rss: 53MB	liveness checking
time: 0.000; rss: 53MB	borrow checking
time: 0.000; rss: 53MB	rvalue checking
time: 0.000; rss: 53MB	reachability checking
time: 0.000; rss: 53MB	death checking
time: 0.000; rss: 53MB	stability checking
time: 0.000; rss: 53MB	unused lib feature checking
time: 0.000; rss: 53MB	lint checking
time: 0.001; rss: 53MB	resolving dependency formats
time: 0.000; rss: 53MB	erasing regions from MIR
time: 0.004; rss: 64MB	translation
  time: 0.000; rss: 67MB	llvm function passes [0]
  time: 0.000; rss: 67MB	llvm module passes [0]
  time: 0.001; rss: 68MB	codegen passes [0]
  time: 0.000; rss: 68MB	codegen passes [0]
time: 0.002; rss: 68MB	LLVM passes
  time: 0.090; rss: 75MB	running linker
time: 0.090; rss: 75MB	linking
done
