commit 35b6461b6e7419ef5b81d02dfe53172219103764
Merge: 1ddaf8b 5b9dd6a
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 13 01:53:06 2015 +0000

    Auto merge of #30310 - mbrubeck:doc-vec-bounds, r=steveklabnik
    
    r? @steveklabnik
    
    Currently neither the API docs nor the book clearly explain that out-of-bounds array indexing causes a panic.  Since this is fairly important and seems to surprise a number of new Rust programmers, I think it's worth adding to both places.  (But if you think it would be better to put this info in the API docs only, that's fine too.)
    
    Some specific things I'd like feedback on:
    
    * The new text here talks about panicking, which hasn't been formally introduced at this point in chapter 5 (though it has been mentioned in previous sections too).
    * Similarly the `Vec::get` example uses `Option<T>` which hasn't been fully introduced yet.  Should we leave out this example?
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.059; rss: 46MB	parsing
time: 0.011; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.001; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.060; rss: 53MB	expansion
time: 0.001; rss: 53MB	complete gated feature checking 1
time: 0.013; rss: 52MB	configuration 2
time: 0.000; rss: 52MB	gated configuration checking
time: 0.006; rss: 52MB	maybe building test harness
time: 0.006; rss: 52MB	prelude injection
time: 0.000; rss: 52MB	checking that all macro invocations are gone
time: 0.000; rss: 52MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 52MB	complete gated feature checking 2
time: 0.006; rss: 52MB	assigning node ids
time: 0.009; rss: 61MB	lowering ast -> hir
time: 0.002; rss: 63MB	indexing hir
time: 0.000; rss: 63MB	attribute checking
time: 0.004; rss: 63MB	early lint checks
time: 0.001; rss: 63MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.008; rss: 73MB	resolution
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.005; rss: 77MB	region resolution
time: 0.001; rss: 77MB	loop checking
time: 0.001; rss: 77MB	static item recursion checking
time: 0.004; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.021; rss: 97MB	coherence checking
time: 0.005; rss: 97MB	wf checking (old)
time: 0.089; rss: 103MB	item-types checking
time: 0.213; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.011; rss: 113MB	wf checking (new)
time: 0.027; rss: 119MB	const checking
time: 0.004; rss: 119MB	privacy checking
time: 0.000; rss: 119MB	stability index
time: 0.001; rss: 119MB	intrinsic checking
time: 0.001; rss: 119MB	effect checking
time: 0.003; rss: 119MB	match checking
time: 0.015; rss: 121MB	MIR dump
time: 0.003; rss: 123MB	liveness checking
time: 0.020; rss: 123MB	borrow checking
time: 0.007; rss: 123MB	rvalue checking
time: 0.000; rss: 123MB	reachability checking
time: 0.002; rss: 123MB	death checking
time: 0.002; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.027; rss: 123MB	lint checking
time: 0.000; rss: 123MB	resolving dependency formats
time: 0.002; rss: 123MB	erasing regions from MIR
time: 0.669; rss: 188MB	translation
  time: 0.038; rss: 120MB	llvm function passes [0]
  time: 0.020; rss: 121MB	llvm module passes [0]
  time: 0.623; rss: 146MB	codegen passes [0]
  time: 0.001; rss: 133MB	codegen passes [0]
time: 0.761; rss: 133MB	LLVM passes
time: 0.067; rss: 132MB	linking
done
