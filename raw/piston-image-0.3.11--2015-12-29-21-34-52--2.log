commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.062; rss: 34MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.017; rss: 35MB	configuration 1
time: 0.000; rss: 35MB	recursion limit
time: 0.001; rss: 35MB	gated macro checking
time: 0.000; rss: 35MB	crate injection
time: 0.005; rss: 40MB	macro loading
time: 0.000; rss: 40MB	plugin loading
time: 0.000; rss: 40MB	plugin registration
time: 0.141; rss: 44MB	expansion
time: 0.004; rss: 44MB	complete gated feature checking 1
time: 0.028; rss: 44MB	configuration 2
time: 0.000; rss: 44MB	gated configuration checking
time: 0.013; rss: 44MB	maybe building test harness
time: 0.012; rss: 44MB	prelude injection
time: 0.001; rss: 44MB	checking that all macro invocations are gone
time: 0.000; rss: 44MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 44MB	complete gated feature checking 2
Post-expansion node count: 144338
time: 0.013; rss: 44MB	assigning node ids
time: 0.034; rss: 56MB	lowering ast -> hir
time: 0.012; rss: 58MB	indexing hir
time: 0.000; rss: 58MB	attribute checking
time: 0.008; rss: 58MB	early lint checks
time: 0.003; rss: 50MB	external crate/lib resolution
time: 0.002; rss: 50MB	language item collection
time: 0.040; rss: 68MB	resolution
time: 0.003; rss: 68MB	lifetime resolution
time: 0.000; rss: 68MB	looking for entry point
time: 0.000; rss: 68MB	looking for plugin registrar
time: 0.021; rss: 75MB	region resolution
time: 0.002; rss: 75MB	loop checking
time: 0.002; rss: 75MB	static item recursion checking
time: 0.013; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.037; rss: 102MB	coherence checking
time: 0.140; rss: 104MB	wf checking
time: 0.058; rss: 107MB	item-types checking
time: 1.704; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.079; rss: 136MB	const checking
time: 0.011; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.010; rss: 136MB	intrinsic checking
time: 0.003; rss: 136MB	effect checking
time: 0.026; rss: 136MB	match checking
time: 0.118; rss: 147MB	MIR dump
time: 0.015; rss: 149MB	liveness checking
time: 0.165; rss: 149MB	borrow checking
time: 0.082; rss: 149MB	rvalue checking
time: 0.003; rss: 149MB	reachability checking
time: 0.009; rss: 149MB	death checking
time: 0.010; rss: 149MB	stability checking
time: 0.000; rss: 149MB	unused lib feature checking
time: 0.086; rss: 149MB	lint checking
time: 0.000; rss: 149MB	resolving dependency formats
time: 0.009; rss: 150MB	erasing regions from MIR
time: 3.136; rss: 267MB	translation
  time: 0.101; rss: 165MB	llvm function passes [0]
  time: 0.043; rss: 166MB	llvm module passes [0]
  time: 1.684; rss: 217MB	codegen passes [0]
  time: 0.001; rss: 184MB	codegen passes [0]
time: 2.053; rss: 184MB	LLVM passes
time: 0.155; rss: 183MB	linking
done
