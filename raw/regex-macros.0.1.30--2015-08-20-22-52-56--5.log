commit b1d07bbe701641e3841c81da808159ef1710f70e
Merge: 3a407b6 4c8d75f
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 21 05:04:32 2015 +0000

    Auto merge of #27837 - Gankro:weaknique, r=aturon
    
    This prepares both for the FCP of #27718
    
    Arc:
    
    * Add previously omitted function `Arc::try_unwrap(Self) -> Result<T, Self>`
    * Move `arc.downgrade()` to `Arc::downgrade(&Self)` per conventions.
    * Deprecate `Arc::weak_count` and `Arc::strong_count` for raciness. It is almost
      impossible to correctly act on these results without a CAS loop on the actual
      fields.
    * Rename `Arc::make_unique` to `Arc::make_mut` to avoid uniqueness terminology
      and to clarify relation to `Arc::get_mut`.
    
    
    Rc:
    * Add `Rc::would_unwrap(&Self) -> bool` to introspect whether try_unwrap would succeed,
      because it's destructive (unlike get_mut).
    * Move `rc.downgrade()` to `Rc::downgrade(&Self)` per conventions.
    * Deprecate `Rc::weak_count` and `Rc::strong_count` for questionable utility.
    * Deprecate `Rc::is_unique` for questionable semantics (there are two kinds of
      uniqueness with Weak pointers in play).
    * Rename `rc.make_unique()` to `Rc::make_mut(&mut Self)` per conventions, to
      avoid uniqueness terminology, and to clarify the relation to `Rc::get_mut`.
    
    Notable omission:
    
    * Arc::would_unwrap is not added due to the fact that it's racy, and therefore doesn't
      provide much actionable information.
    
    (note: rc_would_unwrap is not proposed for FCP as it is truly experimental)
    
    
    r? @aturon (careful attention needs to be taken for the new Arc::try_unwrap, but intuitively it should "just work" by virtue of being semantically equivalent to Drop).
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
makefile:2: recipe for target 'all' failed
done
