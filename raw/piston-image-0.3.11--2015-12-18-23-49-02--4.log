commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.063; rss: 43MB	parsing
time: 0.016; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.001; rss: 44MB	gated macro checking
time: 0.000; rss: 44MB	crate injection
time: 0.004; rss: 49MB	macro loading
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.131; rss: 53MB	expansion
time: 0.004; rss: 53MB	complete gated feature checking 1
time: 0.027; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.013; rss: 53MB	maybe building test harness
time: 0.012; rss: 53MB	prelude injection
time: 0.002; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 53MB	complete gated feature checking 2
time: 0.013; rss: 53MB	assigning node ids
time: 0.036; rss: 66MB	lowering ast -> hir
time: 0.010; rss: 68MB	indexing hir
time: 0.000; rss: 68MB	attribute checking
time: 0.007; rss: 68MB	early lint checks
time: 0.002; rss: 69MB	external crate/lib resolution
time: 0.002; rss: 69MB	language item collection
time: 0.038; rss: 91MB	resolution
time: 0.003; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.018; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.012; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.046; rss: 122MB	coherence checking
time: 0.136; rss: 125MB	wf checking
time: 0.054; rss: 128MB	item-types checking
time: 1.680; rss: 157MB	item-bodies checking
time: 0.000; rss: 157MB	drop-impl checking
time: 0.080; rss: 159MB	const checking
time: 0.012; rss: 159MB	privacy checking
time: 0.001; rss: 159MB	stability index
time: 0.010; rss: 159MB	intrinsic checking
time: 0.003; rss: 159MB	effect checking
time: 0.025; rss: 159MB	match checking
time: 0.118; rss: 170MB	MIR dump
time: 0.012; rss: 170MB	liveness checking
time: 0.156; rss: 171MB	borrow checking
time: 0.079; rss: 171MB	rvalue checking
time: 0.003; rss: 171MB	reachability checking
time: 0.009; rss: 171MB	death checking
time: 0.011; rss: 171MB	stability checking
time: 0.000; rss: 171MB	unused lib feature checking
time: 0.085; rss: 171MB	lint checking
time: 0.000; rss: 171MB	resolving dependency formats
time: 0.012; rss: 172MB	erasing regions from MIR
time: 3.072; rss: 288MB	translation
  time: 0.098; rss: 175MB	llvm function passes [0]
  time: 0.043; rss: 176MB	llvm module passes [0]
  time: 1.745; rss: 227MB	codegen passes [0]
  time: 0.001; rss: 194MB	codegen passes [0]
time: 2.109; rss: 194MB	LLVM passes
time: 0.154; rss: 194MB	linking
done
