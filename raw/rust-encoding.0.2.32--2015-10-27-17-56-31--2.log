commit e0e262737478b695d115519f7856e475c17f84e1
Merge: 8a72584 99f9bb1
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 27 22:56:39 2015 +0000

    Auto merge of #29072 - nagisa:place-arrow, r=pnkfelix
    
    This commit generalises parsing of associative operators from left-associative
    only (with some ugly hacks to support right-associative assignment) to properly
    left/right-associative operators.
    
    Parsing is still is not general enough to handle non-associative,
    non-highest-precedence prefix or non-highest-precedence
    postfix operators (e.g. `..` range syntax) and should be made to be.
    
    Lastly, this commit adds support for parsing right-associative `<-` (left arrow)
    operator with precedence higher than assignment as the operator for placement-in
    feature.
    
    ---
    
    This PR still needs various non-parser changes (e.g. src/grammar and tests) and I’m still working on these; the meat of the PR can already be reviewed, though, I think.
    
    Please review carefully. I made sure that quirks I have discovered so far are preserved (see e.g. https://github.com/rust-lang/rust/issues/29071) and am looking for more corner cases as I continue to work on tests et al, but there may be something I haven’t noticed or accounted for.
    
    EDIT: I’m also not sure I managed to preserve all the semantics with the range operator inside non-trivial expressions since these are a mess at the moment. Crater runs would be nice.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.021; rss: 35MB	parsing
time: 0.006; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.041; rss: 43MB	expansion
time: 0.001; rss: 43MB	complete gated feature checking 1
time: 0.007; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.003; rss: 42MB	maybe building test harness
time: 0.003; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 42MB	complete gated feature checking 2
time: 0.003; rss: 42MB	assigning node ids
time: 0.003; rss: 47MB	lowering ast -> hir
time: 0.002; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	language item collection
time: 0.010; rss: 59MB	resolution
time: 0.000; rss: 59MB	lifetime resolution
time: 0.000; rss: 59MB	looking for entry point
time: 0.000; rss: 59MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 59MB	type collecting
time: 0.000; rss: 59MB	variance inference
time: 0.020; rss: 75MB	coherence checking
time: 0.006; rss: 75MB	wf checking (old)
time: 0.012; rss: 75MB	item-types checking
time: 0.196; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.017; rss: 88MB	wf checking (new)
time: 0.012; rss: 88MB	const checking
time: 0.002; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.006; rss: 88MB	match checking
time: 0.037; rss: 104MB	MIR dump
time: 0.003; rss: 96MB	liveness checking
time: 0.023; rss: 96MB	borrow checking
time: 0.008; rss: 95MB	rvalue checking
time: 0.000; rss: 95MB	reachability checking
time: 0.002; rss: 95MB	death checking
time: 0.001; rss: 95MB	stability checking
time: 0.000; rss: 95MB	unused lib feature checking
time: 0.016; rss: 96MB	lint checking
time: 0.000; rss: 96MB	resolving dependency formats
time: 0.346; rss: 146MB	translation
  time: 0.028; rss: 105MB	llvm function passes [0]
  time: 0.061; rss: 107MB	llvm module passes [0]
  time: 0.573; rss: 129MB	codegen passes [0]
  time: 0.000; rss: 127MB	codegen passes [0]
time: 0.734; rss: 127MB	LLVM passes
time: 0.054; rss: 125MB	linking
done
