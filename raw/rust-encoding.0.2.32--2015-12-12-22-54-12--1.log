commit 35b6461b6e7419ef5b81d02dfe53172219103764
Merge: 1ddaf8b 5b9dd6a
Author: bors <bors@rust-lang.org>
Date:   Sun Dec 13 01:53:06 2015 +0000

    Auto merge of #30310 - mbrubeck:doc-vec-bounds, r=steveklabnik
    
    r? @steveklabnik
    
    Currently neither the API docs nor the book clearly explain that out-of-bounds array indexing causes a panic.  Since this is fairly important and seems to surprise a number of new Rust programmers, I think it's worth adding to both places.  (But if you think it would be better to put this info in the API docs only, that's fine too.)
    
    Some specific things I'd like feedback on:
    
    * The new text here talks about panicking, which hasn't been formally introduced at this point in chapter 5 (though it has been mentioned in previous sections too).
    * Similarly the `Vec::get` example uses `Option<T>` which hasn't been fully introduced yet.  Should we leave out this example?
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 40MB	parsing
time: 0.006; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.046; rss: 45MB	expansion
time: 0.001; rss: 45MB	complete gated feature checking 1
time: 0.008; rss: 45MB	configuration 2
time: 0.000; rss: 45MB	gated configuration checking
time: 0.004; rss: 45MB	maybe building test harness
time: 0.003; rss: 45MB	prelude injection
time: 0.000; rss: 45MB	checking that all macro invocations are gone
time: 0.000; rss: 45MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 45MB	complete gated feature checking 2
time: 0.004; rss: 45MB	assigning node ids
time: 0.005; rss: 49MB	lowering ast -> hir
time: 0.001; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.008; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.019; rss: 83MB	coherence checking
time: 0.007; rss: 83MB	wf checking (old)
time: 0.013; rss: 83MB	item-types checking
time: 0.204; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.018; rss: 96MB	wf checking (new)
time: 0.011; rss: 96MB	const checking
time: 0.002; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.000; rss: 96MB	effect checking
time: 0.006; rss: 96MB	match checking
time: 0.018; rss: 100MB	MIR dump
time: 0.002; rss: 100MB	liveness checking
time: 0.022; rss: 100MB	borrow checking
time: 0.007; rss: 100MB	rvalue checking
time: 0.000; rss: 100MB	reachability checking
time: 0.002; rss: 100MB	death checking
time: 0.001; rss: 100MB	stability checking
time: 0.000; rss: 100MB	unused lib feature checking
time: 0.017; rss: 100MB	lint checking
time: 0.000; rss: 100MB	resolving dependency formats
time: 0.002; rss: 100MB	erasing regions from MIR
time: 0.356; rss: 153MB	translation
  time: 0.028; rss: 112MB	llvm function passes [0]
  time: 0.062; rss: 114MB	llvm module passes [0]
  time: 0.579; rss: 135MB	codegen passes [0]
  time: 0.001; rss: 133MB	codegen passes [0]
time: 0.743; rss: 133MB	LLVM passes
time: 0.055; rss: 133MB	linking
done
