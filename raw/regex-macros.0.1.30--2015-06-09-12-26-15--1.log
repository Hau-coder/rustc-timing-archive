commit 8a3f5af8c98e123247a2847c52474f42874d23fa
Merge: 7b0f2af cb7d914
Author: bors <bors@rust-lang.org>
Date:   Tue Jun 9 18:26:26 2015 +0000

    Auto merge of #25995 - alexcrichton:msvc-md, r=brson
    
    On MSVC there are two ways that the CRT can be linked, either statically or
    dynamically. Each object file produced by the compiler is compiled against
    msvcrt (a dll) or libcmt (a static library). When the linker is dealing with
    more than one object file, it requires that all object files link to the same
    CRT, or else the linker will spit out some errors.
    
    For now, compile code with `-MD` as it seems to appear more often in C libraries
    so we'll stick with the same trend.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002 	parsing
time: 0.001 	configuration 1
time: 0.000 	recursion limit
time: 0.000 	gated macro checking
time: 0.000 	crate injection
time: 0.002 	macro loading
time: 0.000 	plugin loading
time: 0.000 	plugin registration
time: 0.030 	expansion
time: 0.001 	complete gated feature checking 1
time: 0.007 	configuration 2
time: 0.004 	maybe building test harness
time: 0.004 	prelude injection
time: 0.000 	checking that all macro invocations are gone
time: 0.001 	complete gated feature checking 2
time: 0.005 	assigning node ids and indexing ast
time: 0.029 	external crate/lib resolution
time: 0.000 	language item collection
time: 0.019 	resolution
time: 0.001 	lifetime resolution
time: 0.000 	looking for entry point
time: 0.000 	looking for plugin registrar
time: 0.003 	region resolution
time: 0.000 	loop checking
time: 0.000 	static item recursion checking
time: 0.001 	type collecting
time: 0.000 	variance inference
time: 0.062 	coherence checking
time: 4.638 	type checking
time: 0.025 	const checking
time: 0.004 	privacy checking
time: 0.000 	stability index
time: 0.001 	intrinsic checking
time: 0.001 	effect checking
time: 0.001 	match checking
time: 0.004 	liveness checking
time: 0.049 	borrow checking
time: 0.015 	rvalue checking
time: 0.000 	reachability checking
time: 0.003 	death checking
time: 0.007 	stability checking
time: 0.000 	unused lib feature checking
time: 0.020 	lint checking
time: 0.000 	resolving dependency formats
time: 0.905 	translation
  time: 0.035 	llvm function passes
  time: 0.016 	llvm module passes
  time: 0.836 	codegen passes
  time: 0.000 	codegen passes
time: 0.911 	LLVM passes
  time: 0.128 	running linker
time: 0.129 	linking
done
