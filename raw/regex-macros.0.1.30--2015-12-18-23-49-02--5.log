commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 30MB	parsing
time: 0.001; rss: 34MB	configuration 1
time: 0.000; rss: 34MB	recursion limit
time: 0.000; rss: 34MB	gated macro checking
time: 0.000; rss: 34MB	crate injection
time: 0.003; rss: 38MB	macro loading
time: 0.000; rss: 38MB	plugin loading
time: 0.000; rss: 38MB	plugin registration
time: 0.036; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.011; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.005; rss: 46MB	maybe building test harness
time: 0.005; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 46MB	complete gated feature checking 2
time: 0.005; rss: 46MB	assigning node ids
time: 0.005; rss: 50MB	lowering ast -> hir
time: 0.001; rss: 52MB	indexing hir
time: 0.000; rss: 52MB	attribute checking
time: 0.003; rss: 52MB	early lint checks
time: 0.058; rss: 90MB	external crate/lib resolution
time: 0.001; rss: 90MB	language item collection
makefile:2: recipe for target 'all' failed
done
