commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 25MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 25MB	configuration 1
time: 0.000; rss: 25MB	recursion limit
time: 0.000; rss: 25MB	gated macro checking
time: 0.000; rss: 25MB	crate injection
time: 0.002; rss: 31MB	macro loading
time: 0.000; rss: 31MB	plugin loading
time: 0.000; rss: 31MB	plugin registration
time: 0.001; rss: 31MB	expansion
time: 0.000; rss: 31MB	complete gated feature checking 1
time: 0.000; rss: 31MB	configuration 2
time: 0.000; rss: 31MB	gated configuration checking
time: 0.000; rss: 31MB	maybe building test harness
time: 0.000; rss: 31MB	prelude injection
time: 0.000; rss: 31MB	checking that all macro invocations are gone
time: 0.000; rss: 31MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 31MB	complete gated feature checking 2
Post-expansion node count: 68
time: 0.000; rss: 31MB	assigning node ids
time: 0.000; rss: 31MB	lowering ast -> hir
time: 0.000; rss: 31MB	indexing hir
time: 0.000; rss: 31MB	attribute checking
time: 0.000; rss: 31MB	early lint checks
time: 0.001; rss: 31MB	external crate/lib resolution
time: 0.000; rss: 31MB	language item collection
time: 0.001; rss: 40MB	resolution
time: 0.000; rss: 40MB	lifetime resolution
time: 0.000; rss: 40MB	looking for entry point
time: 0.000; rss: 40MB	looking for plugin registrar
time: 0.000; rss: 40MB	region resolution
time: 0.000; rss: 40MB	loop checking
time: 0.000; rss: 40MB	static item recursion checking
time: 0.000; rss: 40MB	type collecting
time: 0.000; rss: 40MB	variance inference
time: 0.005; rss: 48MB	coherence checking
time: 0.000; rss: 48MB	wf checking
time: 0.000; rss: 48MB	item-types checking
time: 0.000; rss: 48MB	item-bodies checking
time: 0.000; rss: 48MB	drop-impl checking
time: 0.000; rss: 48MB	const checking
time: 0.000; rss: 48MB	privacy checking
time: 0.000; rss: 48MB	stability index
time: 0.000; rss: 48MB	intrinsic checking
time: 0.000; rss: 48MB	effect checking
time: 0.000; rss: 48MB	match checking
time: 0.000; rss: 48MB	MIR dump
time: 0.000; rss: 48MB	liveness checking
time: 0.000; rss: 48MB	borrow checking
time: 0.000; rss: 48MB	rvalue checking
time: 0.000; rss: 48MB	reachability checking
time: 0.000; rss: 48MB	death checking
time: 0.000; rss: 48MB	stability checking
time: 0.000; rss: 48MB	unused lib feature checking
time: 0.000; rss: 48MB	lint checking
time: 0.001; rss: 48MB	resolving dependency formats
time: 0.000; rss: 48MB	erasing regions from MIR
time: 0.004; rss: 60MB	translation
  time: 0.000; rss: 62MB	llvm function passes [0]
  time: 0.000; rss: 62MB	llvm module passes [0]
  time: 0.001; rss: 64MB	codegen passes [0]
  time: 0.000; rss: 64MB	codegen passes [0]
time: 0.003; rss: 64MB	LLVM passes
  time: 0.048; rss: 70MB	running linker
time: 0.048; rss: 70MB	linking
done
