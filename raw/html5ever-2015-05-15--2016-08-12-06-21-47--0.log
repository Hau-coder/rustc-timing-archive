commit f55ac6944a88d4da62b30a16cc95893ca050c328
Merge: 68d9284 23f0494
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 12 01:26:12 2016 -0700

    Auto merge of #35091 - eddyb:impl-trait, r=nikomatsakis
    
    Implement `impl Trait` in return type position by anonymization.
    
    This is the first step towards implementing `impl Trait` (cc #34511).
    `impl Trait` types are only allowed in function and inherent method return types, and capture all named lifetime and type parameters, being invariant over them.
    No lifetimes that are not explicitly named lifetime parameters are allowed to escape from the function body.
    The exposed traits are only those listed explicitly, i.e. `Foo` and `Clone` in `impl Foo + Clone`, with the exception of "auto traits" (like `Send` or `Sync`) which "leak" the actual contents.
    
    The implementation strategy is anonymization, i.e.:
    ```rust
    fn foo<T>(xs: Vec<T>) -> impl Iterator<Item=impl FnOnce() -> T> {
        xs.into_iter().map(|x| || x)
    }
    
    // is represented as:
    type A</*invariant over*/ T> where A<T>: Iterator<Item=B<T>>;
    type B</*invariant over*/ T> where B<T>: FnOnce() -> T;
    fn foo<T>(xs: Vec<T>) -> A<T> {
        xs.into_iter().map(|x| || x): $0 where $0: Iterator<Item=$1>, $1: FnOnce() -> T
    }
    ```
    `$0` and `$1` are resolved (to `iter::Map<vec::Iter<T>, closure>` and the closure, respectively) and assigned to `A` and `B`, after checking the body of `foo`. `A` and `B` are *never* resolved for user-facing type equality (typeck), but always for the low-level representation and specialization (trans).
    
    The "auto traits" exception is implemented by collecting bounds like `impl Trait: Send` that have failed for the obscure `impl Trait` type (i.e. `A` or `B` above), pretending they succeeded within the function and trying them again after type-checking the whole crate, by replacing `impl Trait` with the real type.
    
    While passing around values which have explicit lifetime parameters (of the function with `-> impl Trait`) in their type *should* work, regionck appears to assign inference variables in *way* too many cases, and never properly resolving them to either explicit lifetime parameters, or `'static`.
    We might not be able to handle lifetime parameters in `impl Trait` without changes to lifetime inference, but type parameters can have arbitrary lifetimes in them from the caller, so most type-generic usecases (or not generic at all) should not run into this problem.
    
    cc @rust-lang/lang
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/reem/rust-mac`
    Updating git repository `https://github.com/servo/string-cache`
   Compiling mac v0.0.2 (https://github.com/reem/rust-mac#6316d3f4)
   Compiling log v0.3.6
   Compiling libc v0.2.15
   Compiling num-traits v0.1.34
   Compiling lazy_static v0.1.16
   Compiling rustc-serialize v0.3.19
   Compiling phf_shared v0.7.16
   Compiling winapi v0.2.8
   Compiling void v1.0.2
   Compiling winapi-build v0.1.1
   Compiling unreachable v0.1.1
   Compiling debug_unreachable v0.0.6
   Compiling kernel32-sys v0.2.2
   Compiling phf v0.7.16
   Compiling time v0.1.35
   Compiling rand v0.3.14
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling num v0.1.34
   Compiling serde v0.6.15
   Compiling phf_generator v0.7.16
   Compiling string_cache_shared v0.1.12
   Compiling phf_macros v0.7.16
   Compiling string_cache v0.1.17
   Compiling html5ever_macros v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
Build failed, waiting for other jobs to finish...
makefile:2: recipe for target 'all' failed
done
