commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.093; rss: 35MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 35MB	configuration 1
time: 0.000; rss: 35MB	recursion limit
time: 0.001; rss: 35MB	gated macro checking
time: 0.000; rss: 35MB	crate injection
time: 0.003; rss: 38MB	macro loading
time: 0.000; rss: 38MB	plugin loading
time: 0.000; rss: 38MB	plugin registration
time: 0.065; rss: 42MB	expansion
time: 0.001; rss: 42MB	complete gated feature checking 1
time: 0.013; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.007; rss: 42MB	maybe building test harness
time: 0.006; rss: 42MB	prelude injection
time: 0.001; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 42MB	complete gated feature checking 2
Post-expansion node count: 68727
time: 0.007; rss: 42MB	assigning node ids
time: 0.009; rss: 49MB	lowering ast -> hir
time: 0.004; rss: 50MB	indexing hir
time: 0.000; rss: 50MB	attribute checking
time: 0.004; rss: 50MB	early lint checks
time: 0.001; rss: 43MB	external crate/lib resolution
time: 0.001; rss: 43MB	language item collection
time: 0.011; rss: 52MB	resolution
time: 0.001; rss: 52MB	lifetime resolution
time: 0.000; rss: 52MB	looking for entry point
time: 0.000; rss: 52MB	looking for plugin registrar
time: 0.010; rss: 54MB	region resolution
time: 0.001; rss: 54MB	loop checking
time: 0.001; rss: 54MB	static item recursion checking
time: 0.004; rss: 57MB	type collecting
time: 0.000; rss: 57MB	variance inference
time: 0.023; rss: 77MB	coherence checking
time: 0.008; rss: 77MB	wf checking
time: 0.095; rss: 83MB	item-types checking
time: 0.221; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.034; rss: 97MB	const checking
time: 0.005; rss: 97MB	privacy checking
time: 0.001; rss: 97MB	stability index
time: 0.001; rss: 97MB	intrinsic checking
time: 0.001; rss: 97MB	effect checking
time: 0.003; rss: 97MB	match checking
time: 0.017; rss: 100MB	MIR dump
time: 0.003; rss: 100MB	liveness checking
time: 0.021; rss: 101MB	borrow checking
time: 0.008; rss: 101MB	rvalue checking
time: 0.000; rss: 101MB	reachability checking
time: 0.002; rss: 101MB	death checking
time: 0.003; rss: 101MB	stability checking
time: 0.000; rss: 101MB	unused lib feature checking
time: 0.029; rss: 101MB	lint checking
time: 0.000; rss: 101MB	resolving dependency formats
time: 0.002; rss: 101MB	erasing regions from MIR
time: 0.738; rss: 166MB	translation
  time: 0.038; rss: 110MB	llvm function passes [0]
  time: 0.020; rss: 110MB	llvm module passes [0]
  time: 0.601; rss: 137MB	codegen passes [0]
  time: 0.001; rss: 124MB	codegen passes [0]
time: 0.742; rss: 124MB	LLVM passes
time: 0.068; rss: 122MB	linking
done
