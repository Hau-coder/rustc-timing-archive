commit 45e52dadb8548dcbe8da91fe624dd991b4994e70
Merge: 42c3ef8 9bff8b0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 23 00:42:19 2015 +0000

    Auto merge of #30353 - alexcrichton:rpath-by-default, r=brson
    
    This commit changes our distribution and in-tree sources to pass the `-C rpath`
    flag by default during compiles. This means that from-source builds, including
    our release channels, will have this option enabled as well. Motivated
    by #29941, this change means that the compiler should be usable as-is on all
    platforms just after extraction or installation. This experience is already true
    on Windows but on Unixes you still need to set up LD_LIBRARY_PATH or the
    equivalent, which can often be unfortunate.
    
    This option was originally turned off by default for Linux distributions who
    tend to take care of these sorts of details themselves, so it is expected that
    all those builds of Rust will want to pass `--disable-rpath` to the configure
    script to preserve that behavior.
    
    Closes #29941
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.043; rss: 47MB	parsing
time: 0.016; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.005; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.121; rss: 56MB	expansion
time: 0.003; rss: 56MB	complete gated feature checking 1
time: 0.027; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.013; rss: 56MB	maybe building test harness
time: 0.012; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 56MB	complete gated feature checking 2
time: 0.012; rss: 56MB	assigning node ids
time: 0.020; rss: 69MB	lowering ast -> hir
time: 0.006; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.007; rss: 71MB	early lint checks
time: 0.002; rss: 71MB	external crate/lib resolution
time: 0.001; rss: 71MB	language item collection
time: 0.028; rss: 94MB	resolution
time: 0.003; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.010; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.012; rss: 103MB	type collecting
time: 0.000; rss: 103MB	variance inference
time: 0.035; rss: 128MB	coherence checking
time: 0.132; rss: 130MB	wf checking
time: 0.050; rss: 132MB	item-types checking
time: 1.603; rss: 168MB	item-bodies checking
time: 0.000; rss: 168MB	drop-impl checking
time: 0.073; rss: 168MB	const checking
time: 0.012; rss: 168MB	privacy checking
time: 0.001; rss: 168MB	stability index
time: 0.010; rss: 168MB	intrinsic checking
time: 0.004; rss: 168MB	effect checking
time: 0.025; rss: 168MB	match checking
time: 0.095; rss: 181MB	MIR dump
time: 0.011; rss: 183MB	liveness checking
time: 0.152; rss: 183MB	borrow checking
time: 0.077; rss: 183MB	rvalue checking
time: 0.003; rss: 183MB	reachability checking
time: 0.008; rss: 183MB	death checking
time: 0.010; rss: 183MB	stability checking
time: 0.000; rss: 183MB	unused lib feature checking
time: 0.083; rss: 183MB	lint checking
time: 0.000; rss: 183MB	resolving dependency formats
time: 0.008; rss: 183MB	erasing regions from MIR
time: 2.914; rss: 301MB	translation
  time: 0.100; rss: 177MB	llvm function passes [0]
  time: 0.044; rss: 177MB	llvm module passes [0]
  time: 1.738; rss: 229MB	codegen passes [0]
  time: 0.001; rss: 196MB	codegen passes [0]
time: 2.089; rss: 196MB	LLVM passes
time: 0.154; rss: 195MB	linking
done
