commit 6ef02eff89e3d2a29eab3346bff393821df6e033
Merge: 6f3becb 43a6deb
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 26 18:20:58 2015 +0000

    Auto merge of #30043 - arielb1:split-metadata, r=nikomatsakis
    
    This improves bootstrap times because of better parallelism - though I need to measure how much - and allows metadata to be modified without triggering a full recompile. This also ensures that metadata handling and the rest of rustc remain decoupled, which is a first step for switching to a new metadata format.
    
    This is a [breaking-change] to all plugin authors because of the following renames:
     * `rustc::plugin` is now `rustc_plugin`
     * `rustc::metadata` is now `rustc_metadata`
     * Most data types from `rustc::metadata`, along with `LOCAL_CRATE`, are now in `rustc::middle::cstore`.
     * The CStore methods were split between the `rustc::middle::CrateStore` trait (and trait object) and the `rustc_metadata::cstore::CStore`, with an `Rc<CrateStore>` stored in the `Session`. The inner `CStore` can be accessed via the inner `Any` bound, but this is deprecated.
    
    r? @nikomatsakis
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.048; rss: 46MB	parsing
time: 0.009; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.001; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 49MB	macro loading
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.057; rss: 52MB	expansion
time: 0.001; rss: 52MB	complete gated feature checking 1
time: 0.011; rss: 52MB	configuration 2
time: 0.000; rss: 52MB	gated configuration checking
time: 0.005; rss: 52MB	maybe building test harness
time: 0.005; rss: 52MB	prelude injection
time: 0.001; rss: 52MB	checking that all macro invocations are gone
time: 0.000; rss: 52MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 52MB	complete gated feature checking 2
time: 0.005; rss: 52MB	assigning node ids
time: 0.007; rss: 60MB	lowering ast -> hir
time: 0.002; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.004; rss: 62MB	early lint checks
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.010; rss: 71MB	resolution
time: 0.001; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.005; rss: 75MB	region resolution
time: 0.001; rss: 75MB	loop checking
time: 0.001; rss: 75MB	static item recursion checking
time: 0.004; rss: 75MB	type collecting
time: 0.000; rss: 75MB	variance inference
time: 0.021; rss: 95MB	coherence checking
time: 0.005; rss: 95MB	wf checking (old)
time: 0.089; rss: 99MB	item-types checking
time: 0.207; rss: 108MB	item-bodies checking
time: 0.000; rss: 108MB	drop-impl checking
time: 0.010; rss: 108MB	wf checking (new)
time: 0.026; rss: 110MB	const checking
time: 0.004; rss: 110MB	privacy checking
time: 0.000; rss: 110MB	stability index
time: 0.001; rss: 110MB	intrinsic checking
time: 0.001; rss: 110MB	effect checking
time: 0.003; rss: 110MB	match checking
time: 0.015; rss: 116MB	MIR dump
time: 0.003; rss: 118MB	liveness checking
time: 0.020; rss: 118MB	borrow checking
time: 0.007; rss: 118MB	rvalue checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.020; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.002; rss: 118MB	erasing regions from MIR
time: 0.647; rss: 184MB	translation
  time: 0.038; rss: 113MB	llvm function passes [0]
  time: 0.020; rss: 115MB	llvm module passes [0]
  time: 0.622; rss: 140MB	codegen passes [0]
  time: 0.001; rss: 127MB	codegen passes [0]
time: 0.759; rss: 127MB	LLVM passes
time: 0.066; rss: 126MB	linking
done
