commit e362679bb6a76064442492fdd5e07f06854f5605
Merge: e50298f db76ac7
Author: bors <bors@rust-lang.org>
Date:   Thu Oct 8 00:46:01 2015 +0000

    Auto merge of #28811 - alexcrichton:as-ref-ptrs, r=aturon
    
    These common traits were left off originally by accident from these smart
    pointers, and a past attempt (#26008) to add them was later reverted (#26160)
    due to unexpected breakge (#26096) occurring. The specific breakage in worry is
    the meaning of this return value changed:
    
        let a: Box<Option<T>> = ...;
        a.as_ref()
    
    Currently this returns `Option<&T>` but after this change it will return
    `&Option<T>` because the `AsRef::as_ref` method shares the same name as
    `Option::as_ref`. A [crater report][crater] of this change, however, has shown
    that the fallout of this change is quite minimal. These trait implementations
    are "the right impls to add" to these smart pointers and would enable various
    generalizations such as those in #27197.
    
    [crater]: https://gist.github.com/anonymous/0ba4c3512b07641c0f99
    
    This commit is a breaking change for the above reasons mentioned, and the
    mitigation strategies look like any of:
    
        Option::as_ref(&a)
        a.as_ref().as_ref()
        (*a).as_ref()
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes
makefile:2: recipe for target 'all' failed
done
