commit acf4e0be22203213a5e42469deea4dc6e49da840
Merge: 8864f2c ca88e9c
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 7 22:28:45 2015 +0000

    Auto merge of #30087 - petrochenkov:indi, r=nrc
    
    I've measured the time/memory consumption before and after - the difference is lost in statistical noise, so it's mostly a code simplification.
    Sizes of `enum`s are not affected.
    
    r? @nrc
    
    I wonder if AST/HIR visitors could run faster if `P`s are systematically removed (except for cases where they control `enum` sizes). Theoretically they should.
    Remaining unnecessary `P`s can't be easily removed because many folders accept `P<X>`s as arguments, but these folders can be converted to accept `X`s instead without loss of efficiency.
    When I have a mood for some mindless refactoring again, I'll probably try to convert the folders, remove remaining `P`s and measure again.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 42MB	parsing
time: 0.010; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.188; rss: 57MB	expansion
time: 0.006; rss: 57MB	complete gated feature checking 1
time: 0.036; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.014; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
time: 0.011; rss: 57MB	assigning node ids
time: 0.009; rss: 62MB	lowering ast -> hir
time: 0.005; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.005; rss: 64MB	early lint checks
time: 0.003; rss: 66MB	external crate/lib resolution
time: 0.001; rss: 66MB	language item collection
time: 0.032; rss: 90MB	resolution
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.006; rss: 90MB	region resolution
time: 0.001; rss: 90MB	loop checking
time: 0.001; rss: 90MB	static item recursion checking
time: 0.014; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.040; rss: 111MB	coherence checking
time: 0.028; rss: 113MB	wf checking (old)
time: 0.026; rss: 113MB	item-types checking
time: 0.528; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.087; rss: 134MB	wf checking (new)
time: 0.042; rss: 134MB	const checking
time: 0.009; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.012; rss: 134MB	match checking
time: 0.049; rss: 141MB	MIR dump
time: 0.006; rss: 141MB	liveness checking
time: 0.069; rss: 141MB	borrow checking
time: 0.034; rss: 143MB	rvalue checking
time: 0.003; rss: 143MB	reachability checking
time: 0.006; rss: 143MB	death checking
time: 0.005; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.046; rss: 143MB	lint checking
time: 0.000; rss: 143MB	resolving dependency formats
time: 0.008; rss: 145MB	erasing regions from MIR
time: 1.396; rss: 280MB	translation
  time: 0.100; rss: 178MB	llvm function passes [0]
  time: 0.050; rss: 178MB	llvm module passes [0]
  time: 1.663; rss: 223MB	codegen passes [0]
  time: 0.001; rss: 181MB	codegen passes [0]
time: 2.039; rss: 181MB	LLVM passes
time: 0.175; rss: 181MB	linking
done
