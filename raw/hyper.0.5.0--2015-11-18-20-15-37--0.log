commit 9303055f37a34adfceec1d1012b87308136295ce
Merge: 2978af0 7926fa1
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 19 01:01:30 2015 +0000

    Auto merge of #29903 - nikomatsakis:incr-comp-ool-items, r=mw,nrc
    
    This PR moves items into a separate map stored in the krate, rather than storing them inline in the HIR. The HIR visitor is also modified to skip visiting nested items by default. The goal here is to ensure that if you get access to the HIR for one item, you don't automatically get access to a bunch of other items, for better dependency tracking.
    
    r? @nrc
    cc @eddyb
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling libc v0.1.12
   Compiling httparse v0.1.6
   Compiling traitobject v0.0.1
   Compiling libc v0.2.2
   Compiling pkg-config v0.3.6
   Compiling typeable v0.1.2
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.3
   Compiling matches v0.1.2
   Compiling winapi v0.2.5
   Compiling winapi-build v0.1.1
   Compiling lazy_static v0.1.15
   Compiling gcc v0.3.19
   Compiling rustc-serialize v0.3.16
   Compiling log v0.3.3
   Compiling kernel32-sys v0.2.1
   Compiling num_cpus v0.2.7
   Compiling advapi32-sys v0.1.2
   Compiling time v0.1.34
   Compiling mime v0.0.11
   Compiling rand v0.3.12
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 42MB	parsing
time: 0.009; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.174; rss: 56MB	expansion
time: 0.005; rss: 56MB	complete gated feature checking 1
time: 0.030; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.013; rss: 56MB	maybe building test harness
time: 0.010; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.010; rss: 56MB	assigning node ids
time: 0.008; rss: 60MB	lowering ast -> hir
time: 0.005; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.005; rss: 62MB	early lint checks
time: 0.003; rss: 64MB	external crate/lib resolution
time: 0.001; rss: 64MB	language item collection
time: 0.030; rss: 88MB	resolution
time: 0.002; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.006; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.013; rss: 94MB	type collecting
time: 0.000; rss: 94MB	variance inference
time: 0.039; rss: 113MB	coherence checking
time: 0.028; rss: 116MB	wf checking (old)
time: 0.025; rss: 116MB	item-types checking
time: 0.527; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.088; rss: 132MB	wf checking (new)
time: 0.042; rss: 132MB	const checking
time: 0.009; rss: 132MB	privacy checking
time: 0.001; rss: 132MB	stability index
time: 0.004; rss: 132MB	intrinsic checking
time: 0.002; rss: 132MB	effect checking
time: 0.013; rss: 132MB	match checking
time: 0.051; rss: 145MB	MIR dump
time: 0.006; rss: 147MB	liveness checking
time: 0.068; rss: 147MB	borrow checking
time: 0.034; rss: 147MB	rvalue checking
time: 0.003; rss: 147MB	reachability checking
time: 0.006; rss: 147MB	death checking
time: 0.005; rss: 147MB	stability checking
time: 0.000; rss: 147MB	unused lib feature checking
time: 0.041; rss: 147MB	lint checking
time: 0.000; rss: 147MB	resolving dependency formats
time: 0.008; rss: 149MB	erasing regions from MIR
time: 1.401; rss: 287MB	translation
  time: 0.099; rss: 177MB	llvm function passes [0]
  time: 0.050; rss: 177MB	llvm module passes [0]
  time: 1.666; rss: 221MB	codegen passes [0]
  time: 0.001; rss: 177MB	codegen passes [0]
time: 2.033; rss: 177MB	LLVM passes
time: 0.175; rss: 178MB	linking
done
