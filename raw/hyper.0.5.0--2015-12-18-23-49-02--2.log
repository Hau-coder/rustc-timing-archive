commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.039; rss: 37MB	parsing
time: 0.010; rss: 38MB	configuration 1
time: 0.000; rss: 38MB	recursion limit
time: 0.000; rss: 38MB	gated macro checking
time: 0.000; rss: 38MB	crate injection
time: 0.004; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.201; rss: 53MB	expansion
time: 0.006; rss: 53MB	complete gated feature checking 1
time: 0.035; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.014; rss: 53MB	maybe building test harness
time: 0.011; rss: 53MB	prelude injection
time: 0.001; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 53MB	complete gated feature checking 2
time: 0.011; rss: 53MB	assigning node ids
time: 0.020; rss: 58MB	lowering ast -> hir
time: 0.007; rss: 60MB	indexing hir
time: 0.000; rss: 60MB	attribute checking
time: 0.005; rss: 60MB	early lint checks
time: 0.003; rss: 61MB	external crate/lib resolution
time: 0.001; rss: 61MB	language item collection
time: 0.041; rss: 89MB	resolution
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.007; rss: 90MB	region resolution
time: 0.001; rss: 90MB	loop checking
time: 0.001; rss: 90MB	static item recursion checking
time: 0.014; rss: 93MB	type collecting
time: 0.000; rss: 93MB	variance inference
time: 0.053; rss: 115MB	coherence checking
time: 0.063; rss: 116MB	wf checking
time: 0.030; rss: 117MB	item-types checking
time: 0.531; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.046; rss: 134MB	const checking
time: 0.010; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.013; rss: 134MB	match checking
time: 0.063; rss: 142MB	MIR dump
time: 0.006; rss: 142MB	liveness checking
time: 0.071; rss: 142MB	borrow checking
time: 0.035; rss: 142MB	rvalue checking
time: 0.007; rss: 143MB	reachability checking
time: 0.007; rss: 143MB	death checking
time: 0.007; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.047; rss: 143MB	lint checking
time: 0.000; rss: 143MB	resolving dependency formats
time: 0.012; rss: 144MB	erasing regions from MIR
time: 1.657; rss: 282MB	translation
  time: 0.100; rss: 182MB	llvm function passes [0]
  time: 0.050; rss: 182MB	llvm module passes [0]
  time: 1.677; rss: 226MB	codegen passes [0]
  time: 0.001; rss: 189MB	codegen passes [0]
time: 2.056; rss: 189MB	LLVM passes
time: 0.174; rss: 190MB	linking
done
