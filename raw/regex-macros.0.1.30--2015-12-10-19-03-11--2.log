commit 7ce713961cb7c36bb66db70a276973eb78cf9e6e
Merge: 0d36840 5addc31
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 11 00:59:48 2015 +0000

    Auto merge of #30301 - michaelwoerister:mir-to-metadata2, r=nikomatsakis
    
    This PR makes `Mir` `RustcEncodable` and `RustcDecodable` and stores it in crate metadata for inlinable items.
    
    Some other things in here:
    - `mir::visit::Visitor` is extended to also visit `Literals`, `Spans` and `DefIds`.
    - It also adds `mir::visit::MutVisitor` which allows to mutate the visited `Mir` structure in place.
    - Some numbers on how big MIR is in metadata (total metadata size in bytes):
    
    |                | w/ MIR     | w/o MIR     | Rel. Size |
    |----------------|-----------:|------------:|:---------:|
    | libcore        | 17,695,473 |  14,263,377 |  124%     |
    | liblibc        | 411,440   |  404,382    | 102%      |
    | libcollections |  4,537,975 |   3,526,933 |   129%    |
    | libserialize   |  2,574,769 |   2,060,798 |   125%    |
    | libsyntax      | 15,262,894 |  12,075,574 |  126%     |
    | librustc       | 16,984,537 |  13,692,168 |  124%     |
    
    So, adding MIR to metadata makes it about 25% bigger. It could be worse, considering that it still uses the inefficient RBML encoding. Still, the question is whether we should put MIR emission behind a `-Z` flag.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 30MB	parsing
time: 0.001; rss: 35MB	configuration 1
time: 0.000; rss: 35MB	recursion limit
time: 0.000; rss: 35MB	gated macro checking
time: 0.000; rss: 35MB	crate injection
time: 0.002; rss: 38MB	macro loading
time: 0.000; rss: 38MB	plugin loading
time: 0.000; rss: 38MB	plugin registration
time: 0.036; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.011; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.005; rss: 46MB	maybe building test harness
time: 0.005; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 46MB	complete gated feature checking 2
time: 0.005; rss: 46MB	assigning node ids
time: 0.004; rss: 50MB	lowering ast -> hir
time: 0.001; rss: 52MB	indexing hir
time: 0.000; rss: 52MB	attribute checking
time: 0.003; rss: 52MB	early lint checks
time: 0.055; rss: 90MB	external crate/lib resolution
time: 0.001; rss: 90MB	language item collection
makefile:2: recipe for target 'all' failed
done
