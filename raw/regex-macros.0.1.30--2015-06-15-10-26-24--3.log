commit d9b801582872a72bc234088afc74fa468158ea02
Merge: 0d82fb5 52862e4
Author: bors <bors@rust-lang.org>
Date:   Mon Jun 15 14:07:48 2015 +0000

    Auto merge of #26302 - aidanhs:aphs-fix-musl-libc, r=alexcrichton
    
    musl may not be available on the target user's machine, and even if it is, we may not be able to find it because of how static libraries are searched for.
    Instead, use the liblibc archive created at rust compile time which already contains libc.a.
    
    ---
    
    To be honest, my brain is bending a bit at this point and I wonder if I'm doing something a bit stupid.
    
    Problem: building the libc crate with target musl. It says "could not find native static library `c`, perhaps an -L flag is missing?".
    
    Some pondering: the key problem is the way static archives are searched for (note that a musl build attempts to statically link to libc) - they aren't. There are three locations which are checked (including `$PREFIX/lib/rustlib/x86_64-unknown-linux-musl/lib`), but this does not include `$PREFIX/lib`...and it probably shouldn't - rustc is mimicking the way native lib generation works by forcing you to provide the path yourself. You can make it work `cargo rustc` with `-L native=/path/to/musl/lib`, but even if this went in a build script for the libc crate, it wouldn't work if musl isn't installed by the end user.
    
    I've sprinkled `not(test)` around but I've no idea if I've done it right.
    
    This patch allows `cargo build --target x86_64-unknown-linux-musl` to work on a crate with a dependency on libc, where the musl-enabled rust was compiled before this patch. I've not yet kicked off the long process to build a musl-enabled rust with this patch, so it might be broken there.
    
    Sorry for the rambling.
    
    r? @alexcrichton
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002 	parsing
time: 0.001 	configuration 1
time: 0.000 	recursion limit
time: 0.000 	gated macro checking
time: 0.000 	crate injection
time: 0.002 	macro loading
time: 0.000 	plugin loading
time: 0.000 	plugin registration
time: 0.029 	expansion
time: 0.001 	complete gated feature checking 1
time: 0.007 	configuration 2
time: 0.004 	maybe building test harness
time: 0.004 	prelude injection
time: 0.000 	checking that all macro invocations are gone
time: 0.001 	complete gated feature checking 2
time: 0.005 	assigning node ids and indexing ast
time: 0.029 	external crate/lib resolution
time: 0.001 	language item collection
time: 0.019 	resolution
time: 0.001 	lifetime resolution
time: 0.000 	looking for entry point
time: 0.000 	looking for plugin registrar
time: 0.003 	region resolution
time: 0.000 	loop checking
time: 0.000 	static item recursion checking
time: 0.001 	type collecting
time: 0.000 	variance inference
time: 0.061 	coherence checking
time: 4.171 	type checking
time: 0.025 	const checking
time: 0.004 	privacy checking
time: 0.000 	stability index
time: 0.001 	intrinsic checking
time: 0.001 	effect checking
time: 0.001 	match checking
time: 0.004 	liveness checking
time: 0.049 	borrow checking
time: 0.014 	rvalue checking
time: 0.000 	reachability checking
time: 0.003 	death checking
time: 0.007 	stability checking
time: 0.000 	unused lib feature checking
time: 0.020 	lint checking
time: 0.000 	resolving dependency formats
time: 0.830 	translation
  time: 0.035 	llvm function passes
  time: 0.016 	llvm module passes
  time: 0.844 	codegen passes
  time: 0.000 	codegen passes
time: 0.924 	LLVM passes
  time: 0.123 	running linker
time: 0.124 	linking
done
