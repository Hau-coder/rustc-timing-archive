commit 9e63cecb10a3a22abed9c230c5daf268dc258bf3
Merge: 8f031bf 915cb37
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 15 04:21:53 2015 +0000

    Auto merge of #30233 - retep998:where-in-the-world-is-windows-sdk, r=alexcrichton
    
    What I've done here is try to make the code match what vcvars does much more closely. It now chooses which SDK to find based on the version of MSVC that it found. It also bases the decision of whether to find all the things on whether `VCINSTALLDIR` has been set, which is more likely to have only been set by an invocation of vcvars, unlike previously where it would do some things only if `LIB` wasn't set even though there was a valid use case for libraries to add themselves to `LIB` without having invoked vcvars.
    
    There are still some debug `println!`s so people can test the PR and make sure it works correctly on various setups.
    
    It supports VS 2015, 2013, and 2012. People who want to use versions of VS older (or newer) than that will have to manually invoke the appropriate vcvars bat file to set the proper environment variables themselves.
    
    Do not merge yet.
    
    Fixes https://github.com/rust-lang/rust/issues/30229
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 40MB	parsing
time: 0.006; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.046; rss: 45MB	expansion
time: 0.001; rss: 45MB	complete gated feature checking 1
time: 0.008; rss: 45MB	configuration 2
time: 0.000; rss: 45MB	gated configuration checking
time: 0.004; rss: 45MB	maybe building test harness
time: 0.004; rss: 45MB	prelude injection
time: 0.000; rss: 45MB	checking that all macro invocations are gone
time: 0.000; rss: 45MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 45MB	complete gated feature checking 2
time: 0.004; rss: 45MB	assigning node ids
time: 0.005; rss: 49MB	lowering ast -> hir
time: 0.001; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.008; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.019; rss: 83MB	coherence checking
time: 0.007; rss: 83MB	wf checking (old)
time: 0.013; rss: 83MB	item-types checking
time: 0.203; rss: 95MB	item-bodies checking
time: 0.000; rss: 95MB	drop-impl checking
time: 0.018; rss: 95MB	wf checking (new)
time: 0.011; rss: 95MB	const checking
time: 0.002; rss: 95MB	privacy checking
time: 0.000; rss: 95MB	stability index
time: 0.001; rss: 95MB	intrinsic checking
time: 0.000; rss: 95MB	effect checking
time: 0.006; rss: 95MB	match checking
time: 0.018; rss: 99MB	MIR dump
time: 0.002; rss: 99MB	liveness checking
time: 0.022; rss: 99MB	borrow checking
time: 0.006; rss: 99MB	rvalue checking
time: 0.000; rss: 99MB	reachability checking
time: 0.002; rss: 99MB	death checking
time: 0.001; rss: 99MB	stability checking
time: 0.000; rss: 99MB	unused lib feature checking
time: 0.017; rss: 99MB	lint checking
time: 0.000; rss: 99MB	resolving dependency formats
time: 0.002; rss: 99MB	erasing regions from MIR
time: 0.357; rss: 153MB	translation
  time: 0.028; rss: 113MB	llvm function passes [0]
  time: 0.063; rss: 115MB	llvm module passes [0]
  time: 0.580; rss: 136MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 0.745; rss: 134MB	LLVM passes
time: 0.054; rss: 133MB	linking
done
