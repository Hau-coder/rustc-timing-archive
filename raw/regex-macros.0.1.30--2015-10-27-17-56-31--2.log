commit e0e262737478b695d115519f7856e475c17f84e1
Merge: 8a72584 99f9bb1
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 27 22:56:39 2015 +0000

    Auto merge of #29072 - nagisa:place-arrow, r=pnkfelix
    
    This commit generalises parsing of associative operators from left-associative
    only (with some ugly hacks to support right-associative assignment) to properly
    left/right-associative operators.
    
    Parsing is still is not general enough to handle non-associative,
    non-highest-precedence prefix or non-highest-precedence
    postfix operators (e.g. `..` range syntax) and should be made to be.
    
    Lastly, this commit adds support for parsing right-associative `<-` (left arrow)
    operator with precedence higher than assignment as the operator for placement-in
    feature.
    
    ---
    
    This PR still needs various non-parser changes (e.g. src/grammar and tests) and I’m still working on these; the meat of the PR can already be reviewed, though, I think.
    
    Please review carefully. I made sure that quirks I have discovered so far are preserved (see e.g. https://github.com/rust-lang/rust/issues/29071) and am looking for more corner cases as I continue to work on tests et al, but there may be something I haven’t noticed or accounted for.
    
    EDIT: I’m also not sure I managed to preserve all the semantics with the range operator inside non-trivial expressions since these are a mess at the moment. Crater runs would be nice.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 29MB	parsing
time: 0.001; rss: 33MB	configuration 1
time: 0.000; rss: 33MB	recursion limit
time: 0.000; rss: 33MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.026; rss: 44MB	expansion
time: 0.001; rss: 44MB	complete gated feature checking 1
time: 0.007; rss: 44MB	configuration 2
time: 0.000; rss: 44MB	gated configuration checking
time: 0.004; rss: 44MB	maybe building test harness
time: 0.003; rss: 44MB	prelude injection
time: 0.000; rss: 44MB	checking that all macro invocations are gone
time: 0.000; rss: 44MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 44MB	complete gated feature checking 2
time: 0.004; rss: 44MB	assigning node ids
time: 0.004; rss: 49MB	lowering ast -> hir
time: 0.001; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.003; rss: 49MB	early lint checks
time: 0.047; rss: 86MB	external crate/lib resolution
time: 0.001; rss: 86MB	language item collection
time: 0.015; rss: 104MB	resolution
time: 0.000; rss: 104MB	lifetime resolution
time: 0.000; rss: 104MB	looking for entry point
time: 0.000; rss: 104MB	looking for plugin registrar
time: 0.002; rss: 106MB	region resolution
time: 0.000; rss: 106MB	loop checking
time: 0.000; rss: 106MB	static item recursion checking
time: 0.004; rss: 111MB	type collecting
time: 0.000; rss: 111MB	variance inference
time: 0.016; rss: 134MB	coherence checking
time: 0.001; rss: 134MB	wf checking (old)
time: 0.001; rss: 134MB	item-types checking
time: 1.047; rss: 168MB	item-bodies checking
time: 0.000; rss: 168MB	drop-impl checking
time: 0.006; rss: 168MB	wf checking (new)
time: 0.015; rss: 168MB	const checking
time: 0.003; rss: 168MB	privacy checking
time: 0.000; rss: 168MB	stability index
time: 0.001; rss: 168MB	intrinsic checking
time: 0.001; rss: 168MB	effect checking
time: 0.001; rss: 168MB	match checking
time: 0.025; rss: 179MB	MIR dump
time: 0.004; rss: 173MB	liveness checking
time: 0.039; rss: 171MB	borrow checking
time: 0.011; rss: 171MB	rvalue checking
time: 0.000; rss: 171MB	reachability checking
time: 0.002; rss: 171MB	death checking
time: 0.003; rss: 171MB	stability checking
time: 0.000; rss: 171MB	unused lib feature checking
time: 0.016; rss: 170MB	lint checking
time: 0.002; rss: 170MB	resolving dependency formats
time: 0.411; rss: 214MB	translation
  time: 0.034; rss: 164MB	llvm function passes [0]
  time: 0.013; rss: 165MB	llvm module passes [0]
  time: 0.741; rss: 184MB	codegen passes [0]
  time: 0.000; rss: 184MB	codegen passes [0]
time: 0.808; rss: 184MB	LLVM passes
  time: 0.002; rss: 184MB	altering regex-640d5d4018246dae.rlib
  time: 0.109; rss: 191MB	running linker
time: 0.112; rss: 189MB	linking
done
