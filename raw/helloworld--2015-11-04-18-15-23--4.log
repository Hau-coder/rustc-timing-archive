commit effcd29652bbf16981d9cd0d8a578681b2ed55bb
Merge: 4ee11cd 59c5191
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 4 20:39:49 2015 +0000

    Auto merge of #29543 - Amanieu:asm_mem_constraint, r=alexcrichton
    
    The "m" memory constraint in inline assembly is broken (generates incorrect code or triggers LLVM asserts) and should not be used. Instead, indirect memory operands should be used with "\*m", "=\*m" and "+\*m".
    
    Clang does this transparently by transforming "m" constraints into "\*m" indirect constraints, but for now just being able to use "\*m" directly is enough since asm! isn't stable.
    
    While "\*m" works fine as an input operand, "=\*m" and "+\*m" need to be specified as input operands because they take a pointer value as an input. This PR relaxes the constraint checker to allow constraints starting with "=" or "+" if the constraint string contains a "\*", which indicates an indirect operand.
    
    This (indirectly) fixes these issues: #29382, #16383 and #13366. The code will need to be changed to use "\*m" instead of "m".
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes
time: 0.000; rss: 29MB	parsing
time: 0.000; rss: 29MB	configuration 1
time: 0.000; rss: 29MB	recursion limit
time: 0.000; rss: 33MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.001; rss: 35MB	expansion
time: 0.000; rss: 35MB	complete gated feature checking 1
time: 0.000; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.000; rss: 35MB	maybe building test harness
time: 0.000; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 35MB	complete gated feature checking 2
time: 0.000; rss: 35MB	assigning node ids
time: 0.000; rss: 35MB	lowering ast -> hir
time: 0.000; rss: 35MB	indexing hir
time: 0.000; rss: 35MB	attribute checking
time: 0.000; rss: 35MB	early lint checks
time: 0.001; rss: 35MB	external crate/lib resolution
time: 0.000; rss: 35MB	language item collection
time: 0.001; rss: 39MB	resolution
time: 0.000; rss: 39MB	lifetime resolution
time: 0.000; rss: 43MB	looking for entry point
time: 0.000; rss: 43MB	looking for plugin registrar
time: 0.000; rss: 43MB	region resolution
time: 0.000; rss: 43MB	loop checking
time: 0.000; rss: 43MB	static item recursion checking
time: 0.000; rss: 43MB	type collecting
time: 0.000; rss: 43MB	variance inference
time: 0.004; rss: 48MB	coherence checking
time: 0.000; rss: 48MB	wf checking (old)
time: 0.000; rss: 52MB	item-types checking
time: 0.000; rss: 52MB	item-bodies checking
time: 0.000; rss: 52MB	drop-impl checking
time: 0.000; rss: 52MB	wf checking (new)
time: 0.000; rss: 52MB	const checking
time: 0.000; rss: 52MB	privacy checking
time: 0.000; rss: 52MB	stability index
time: 0.000; rss: 52MB	intrinsic checking
time: 0.000; rss: 52MB	effect checking
time: 0.000; rss: 52MB	match checking
time: 0.000; rss: 52MB	MIR dump
time: 0.000; rss: 52MB	liveness checking
time: 0.000; rss: 52MB	borrow checking
time: 0.000; rss: 52MB	rvalue checking
time: 0.000; rss: 52MB	reachability checking
time: 0.000; rss: 52MB	death checking
time: 0.000; rss: 52MB	stability checking
time: 0.000; rss: 52MB	unused lib feature checking
time: 0.000; rss: 52MB	lint checking
time: 0.001; rss: 52MB	resolving dependency formats
time: 0.004; rss: 61MB	translation
  time: 0.000; rss: 64MB	llvm function passes [0]
  time: 0.000; rss: 64MB	llvm module passes [0]
  time: 0.001; rss: 65MB	codegen passes [0]
  time: 0.000; rss: 65MB	codegen passes [0]
time: 0.002; rss: 65MB	LLVM passes
  time: 0.084; rss: 71MB	running linker
time: 0.084; rss: 71MB	linking
done
