commit f17cc4cf045dcb8e8fb3e2060eb0ec0681e6c08f
Merge: 0b089cd 920f32b
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 22 09:19:47 2015 +0000

    Auto merge of #28578 - gandro:nodefaultlibs, r=alexcrichton
    
    This patch basically adds a target option for omitting the `-nodefaultlibs` flag when invoking the linker. I am not sure if this is the correct or only way to approach this problem, so any feedback is welcome.
    
    Motivation: I'm currently working on a Rust target specification for the [rumprun](/rumpkernel/rumprun) unikernel. rumprun is based on rump kernels and uses NetBSDs libc and drivers to provide a POSIXy environment. It provides its own linker wrapper that generates binaries which can be "baked" into a unikernel after configuration. Using `-nodefaultlibs` on the rumprun linker will prevent it from selecting the search paths for the rumprun libraries. My current target implementation for rumprun is here: gandro/rust@295744b2ee2378f41a20d4b498b8f1991a75e93c
    
    Currently, only a target that `is_like_windows` will omit the `-nodefaultlibs` flag, but since rumprun is not like Windows otherwise, I think a separate flag makes more sense. This might be a breaking change for target specifications that have the `is_like_windows` option set to true. Such targets need to set `no_default_libraries` to false in order to restore the old behavior.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000; rss: 30MB	parsing
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 30MB	gated macro checking
time: 0.000; rss: 30MB	crate injection
time: 0.002; rss: 36MB	macro loading
time: 0.000; rss: 36MB	plugin loading
time: 0.000; rss: 36MB	plugin registration
time: 0.001; rss: 36MB	expansion
time: 0.000; rss: 36MB	complete gated feature checking 1
time: 0.000; rss: 36MB	configuration 2
time: 0.000; rss: 36MB	gated configuration checking
time: 0.000; rss: 36MB	maybe building test harness
time: 0.000; rss: 36MB	prelude injection
time: 0.000; rss: 36MB	checking that all macro invocations are gone
time: 0.000; rss: 36MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 36MB	complete gated feature checking 2
time: 0.000; rss: 36MB	assigning node ids
time: 0.000; rss: 36MB	lowering ast -> hir
time: 0.000; rss: 36MB	indexing hir
time: 0.000; rss: 36MB	early lint checks
time: 0.001; rss: 36MB	external crate/lib resolution
time: 0.000; rss: 36MB	language item collection
time: 0.001; rss: 44MB	resolution
time: 0.000; rss: 44MB	lifetime resolution
time: 0.000; rss: 44MB	looking for entry point
time: 0.000; rss: 44MB	looking for plugin registrar
time: 0.000; rss: 44MB	region resolution
time: 0.000; rss: 44MB	loop checking
time: 0.000; rss: 44MB	static item recursion checking
time: 0.000; rss: 44MB	type collecting
time: 0.000; rss: 44MB	variance inference
time: 0.004; rss: 53MB	coherence checking
time: 0.000; rss: 53MB	wf checking (old)
time: 0.000; rss: 53MB	item-types checking
time: 0.000; rss: 53MB	item-bodies checking
time: 0.000; rss: 53MB	drop-impl checking
time: 0.000; rss: 53MB	wf checking (new)
time: 0.000; rss: 53MB	MIR dump
time: 0.000; rss: 53MB	const checking
time: 0.000; rss: 53MB	privacy checking
time: 0.000; rss: 53MB	stability index
time: 0.000; rss: 53MB	intrinsic checking
time: 0.000; rss: 53MB	effect checking
time: 0.000; rss: 53MB	match checking
time: 0.000; rss: 53MB	liveness checking
time: 0.000; rss: 53MB	borrow checking
time: 0.000; rss: 53MB	rvalue checking
time: 0.000; rss: 53MB	reachability checking
time: 0.000; rss: 53MB	death checking
time: 0.000; rss: 53MB	stability checking
time: 0.000; rss: 53MB	unused lib feature checking
time: 0.000; rss: 53MB	lint checking
time: 0.001; rss: 53MB	resolving dependency formats
time: 0.004; rss: 63MB	translation
  time: 0.000; rss: 66MB	llvm function passes
  time: 0.000; rss: 66MB	llvm module passes
  time: 0.001; rss: 67MB	codegen passes
  time: 0.000; rss: 67MB	codegen passes
time: 0.002; rss: 67MB	LLVM passes
  time: 0.085; rss: 73MB	running linker
time: 0.085; rss: 73MB	linking
done
