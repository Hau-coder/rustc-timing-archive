commit e819d8aa3cd2319fa57e7336e167069ef7002d6a
Merge: 64c21f9 0ca2a9e
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 7 02:16:13 2015 +0000

    Auto merge of #30247 - bluss:revert-array-clone, r=alexcrichton
    
    Revert "PR #30130 Implement `Clone` for more arrays"
    
    This reverts commit e22a64e8d8d4da46c74f878ce1c23ad1c88982e8.
    
    This caused a regression such that types like `[[u8; 256]; 4]`
    no longer implemented Clone. This previously worked due to Clone
    for `[T; N]` (N in 0 to 32) being implemented for T: Copy.
    
    Due to fixed size arrays not implementing Clone for sizes above 32,
    the new implementation requiring T: Clone would not allow
    `[[u8; 256]; 4]` to be Clone.
    
    Fixes #30244
    
    Due to changing back, this is technically a [breaking-change],
    albeit for a behavior that existed for a very short time.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 38MB	parsing
time: 0.010; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.004; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.190; rss: 56MB	expansion
time: 0.005; rss: 56MB	complete gated feature checking 1
time: 0.035; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.014; rss: 56MB	maybe building test harness
time: 0.011; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.011; rss: 56MB	assigning node ids
time: 0.009; rss: 61MB	lowering ast -> hir
time: 0.005; rss: 65MB	indexing hir
time: 0.000; rss: 65MB	attribute checking
time: 0.005; rss: 65MB	early lint checks
time: 0.003; rss: 67MB	external crate/lib resolution
time: 0.001; rss: 67MB	language item collection
time: 0.031; rss: 91MB	resolution
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.006; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.014; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.038; rss: 110MB	coherence checking
time: 0.027; rss: 116MB	wf checking (old)
time: 0.026; rss: 116MB	item-types checking
time: 0.627; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.123; rss: 133MB	wf checking (new)
time: 0.058; rss: 133MB	const checking
time: 0.012; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.005; rss: 133MB	intrinsic checking
time: 0.002; rss: 133MB	effect checking
time: 0.018; rss: 133MB	match checking
time: 0.068; rss: 139MB	MIR dump
time: 0.008; rss: 141MB	liveness checking
time: 0.100; rss: 141MB	borrow checking
time: 0.048; rss: 143MB	rvalue checking
time: 0.004; rss: 143MB	reachability checking
time: 0.008; rss: 143MB	death checking
time: 0.007; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.063; rss: 143MB	lint checking
time: 0.000; rss: 143MB	resolving dependency formats
time: 0.010; rss: 145MB	erasing regions from MIR
time: 1.416; rss: 279MB	translation
  time: 0.100; rss: 178MB	llvm function passes [0]
  time: 0.051; rss: 179MB	llvm module passes [0]
  time: 1.665; rss: 222MB	codegen passes [0]
  time: 0.001; rss: 181MB	codegen passes [0]
time: 2.037; rss: 181MB	LLVM passes
time: 0.175; rss: 181MB	linking
done
