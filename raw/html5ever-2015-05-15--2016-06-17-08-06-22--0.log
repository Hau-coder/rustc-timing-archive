commit c8eff682fd486a405dfbfcc89e613dcbccac0904
Merge: be203ac 5df05c6
Author: bors <bors@rust-lang.org>
Date:   Fri Jun 17 03:36:32 2016 -0700

    Auto merge of #33090 - bluss:special-zip-2, r=aturon
    
    Specialize .zip() for efficient slice and slice iteration
    
    The idea is to introduce a private trait TrustedRandomAccess and specialize .zip() for random access iterators into a counted loop.
    
    The implementation in the PR is internal and has no visible effect in the API
    
    Why a counted loop? To have each slice iterator compile to just a pointer, and both pointers are indexed with the same loop counter value in the generated code. When this succeeds, copying loops are readily recognized and replaced with memcpy and addition loops autovectorize well.
    
    The TrustedRandomAccess approach works very well on the surface. Microbenchmarks optimize well, following the ideas above, and that is a dramatic improvement of .zip()'s codegen.
    
    ```rust
    // old zip before this PR: bad, byte-for-byte loop
    // with specialized zip: memcpy
    pub fn copy_zip(xs: &[u8], ys: &mut [u8]) {
        for (a, b) in ys.iter_mut().zip(xs) {
            *a = *b;
        }
    }
    
    // old zip before this PR: single addition per iteration
    // with specialized zip: vectorized
    pub fn add_zip(xs: &[f32], ys: &mut [f32]) {
        for (a, b) in ys.iter_mut().zip(xs) { *a += *b; }
    }
    
    // old zip before this PR: single addition per iteration
    // with specialized zip: vectorized (!!)
    pub fn add_zip3(xs: &[f32], ys: &[f32], zs: &mut [f32]) {
        for ((a, b), c) in zs.iter_mut().zip(xs).zip(ys) { *a += *b * *c; }
    }
    ```
    
    Yet in more complex situations, the .zip() loop can still fall back to its old behavior where phantom null checks throw in fake premature end of the loop conditionals. Remember that a NULL inside
    Option<(&T, &T)> makes it a `None` value and a premature (in this case)
    end of the loop.
    
    So even if we have 1) an explicit `Some` in the code and 2) the types of the pointers are `&T` or `&mut T` which are nonnull, we can still get a phantom null check at that point.
    
    One example that illustrates the difference is `copy_zip` with slice versus Vec arguments. The involved iterator types are exactly the same, but the Vec version doesn't compile down to memcpy. Investigating into this, the function argument metadata emitted to llvm plays the biggest role. As eddyb summarized, we need nonnull for the loop to autovectorize and noalias for it to replace with memcpy.
    
    There was an experiment to use `assume` to add a non-null assumption on each of the two elements in the specialized zip iterator, but this only helped in some of the test cases and regressed others. Instead I think the nonnull/noalias metadata issue is something we need to solve separately anyway.
    
    These have conditionally implemented TrustedRandomAccess
    
    - Enumerate
    - Zip
    
    These have not implemented it
    
    - Map is sideeffectful. The forward case would be workable, but the double ended case is complicated.
    - Chain, exact length semantics unclear
    - Filter, FilterMap, FlatMap and many others don't offer random access and/or exact length
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating git repository `https://github.com/reem/rust-mac`
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/servo/string-cache`
   Compiling winapi-build v0.1.1
   Compiling log v0.3.6
   Compiling libc v0.2.12
   Compiling phf_shared v0.7.15
   Compiling void v1.0.2
   Compiling mac v0.0.2 (https://github.com/reem/rust-mac#6316d3f4)
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.1.16
   Compiling winapi v0.2.7
   Compiling num-traits v0.1.32
   Compiling unreachable v0.1.1
   Compiling debug_unreachable v0.0.6
   Compiling kernel32-sys v0.2.2
   Compiling phf v0.7.15
   Compiling time v0.1.35
   Compiling rand v0.3.14
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling num v0.1.32
   Compiling serde v0.6.15
   Compiling phf_generator v0.7.15
   Compiling phf_macros v0.7.15
   Compiling string_cache_shared v0.1.12
   Compiling string_cache v0.1.17
   Compiling html5ever_macros v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
Build failed, waiting for other jobs to finish...
makefile:2: recipe for target 'all' failed
done
