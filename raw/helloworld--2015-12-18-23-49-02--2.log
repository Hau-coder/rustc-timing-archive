commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes
time: 0.000; rss: 31MB	parsing
time: 0.000; rss: 31MB	configuration 1
time: 0.000; rss: 31MB	recursion limit
time: 0.000; rss: 31MB	gated macro checking
time: 0.000; rss: 31MB	crate injection
time: 0.002; rss: 37MB	macro loading
time: 0.000; rss: 37MB	plugin loading
time: 0.000; rss: 37MB	plugin registration
time: 0.001; rss: 37MB	expansion
time: 0.000; rss: 37MB	complete gated feature checking 1
time: 0.000; rss: 37MB	configuration 2
time: 0.000; rss: 37MB	gated configuration checking
time: 0.000; rss: 37MB	maybe building test harness
time: 0.000; rss: 37MB	prelude injection
time: 0.000; rss: 37MB	checking that all macro invocations are gone
time: 0.000; rss: 37MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 37MB	complete gated feature checking 2
time: 0.000; rss: 37MB	assigning node ids
time: 0.000; rss: 37MB	lowering ast -> hir
time: 0.000; rss: 37MB	indexing hir
time: 0.000; rss: 37MB	attribute checking
time: 0.000; rss: 37MB	early lint checks
time: 0.001; rss: 37MB	external crate/lib resolution
time: 0.000; rss: 37MB	language item collection
time: 0.001; rss: 45MB	resolution
time: 0.000; rss: 45MB	lifetime resolution
time: 0.000; rss: 45MB	looking for entry point
time: 0.000; rss: 45MB	looking for plugin registrar
time: 0.000; rss: 45MB	region resolution
time: 0.000; rss: 45MB	loop checking
time: 0.000; rss: 45MB	static item recursion checking
time: 0.000; rss: 45MB	type collecting
time: 0.000; rss: 45MB	variance inference
time: 0.005; rss: 54MB	coherence checking
time: 0.000; rss: 54MB	wf checking
time: 0.000; rss: 54MB	item-types checking
time: 0.000; rss: 54MB	item-bodies checking
time: 0.000; rss: 54MB	drop-impl checking
time: 0.000; rss: 54MB	const checking
time: 0.000; rss: 54MB	privacy checking
time: 0.000; rss: 54MB	stability index
time: 0.000; rss: 54MB	intrinsic checking
time: 0.000; rss: 54MB	effect checking
time: 0.000; rss: 54MB	match checking
time: 0.000; rss: 54MB	MIR dump
time: 0.000; rss: 54MB	liveness checking
time: 0.000; rss: 54MB	borrow checking
time: 0.000; rss: 54MB	rvalue checking
time: 0.000; rss: 54MB	reachability checking
time: 0.000; rss: 54MB	death checking
time: 0.000; rss: 54MB	stability checking
time: 0.000; rss: 54MB	unused lib feature checking
time: 0.000; rss: 54MB	lint checking
time: 0.001; rss: 54MB	resolving dependency formats
time: 0.000; rss: 54MB	erasing regions from MIR
time: 0.004; rss: 65MB	translation
  time: 0.000; rss: 68MB	llvm function passes [0]
  time: 0.000; rss: 68MB	llvm module passes [0]
  time: 0.001; rss: 69MB	codegen passes [0]
  time: 0.000; rss: 69MB	codegen passes [0]
time: 0.002; rss: 69MB	LLVM passes
  time: 0.088; rss: 76MB	running linker
time: 0.088; rss: 76MB	linking
done
