commit 64b027764302aa67aa701a9f81bd938ca3d4052a
Merge: cc8d398 46068c9
Author: bors <bors@rust-lang.org>
Date:   Fri Oct 30 22:23:41 2015 +0000

    Auto merge of #29454 - stepancheg:vec-reserve, r=bluss
    
    Before this patch `reserve` function allocated twice as requested
    amount elements (not twice as capacity).  It leaded to unnecessary
    excessive memory usage in scenarios like this:
    
    ```
    let mut v = Vec::new();
    v.push(17);
    v.extend(0..10);
    println!("{}", v.capacity());
    ```
    
    `Vec` allocated 22 elements, while it could allocate just 11.
    
    `reserve` function must have a property of keeping `push` operation
    cost (which calls `reserve`) `O(1)`. To achieve this `reserve` must
    exponentialy grow its capacity when it does reallocation.
    
    There's better strategy to implement `reserve`:
    
    ```
    let new_capacity = max(current_capacity * 2, requested_capacity);
    ```
    
    This strategy still guarantees that capacity grows at `O(1)` with
    `reserve`, and fixes the issue with `extend`.
    
    Patch imlpements this strategy.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.039; rss: 45MB	parsing
time: 0.014; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.001; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.004; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.105; rss: 54MB	expansion
time: 0.003; rss: 54MB	complete gated feature checking 1
time: 0.022; rss: 54MB	configuration 2
time: 0.000; rss: 54MB	gated configuration checking
time: 0.012; rss: 54MB	maybe building test harness
time: 0.011; rss: 54MB	prelude injection
time: 0.001; rss: 54MB	checking that all macro invocations are gone
time: 0.000; rss: 54MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 54MB	complete gated feature checking 2
time: 0.011; rss: 54MB	assigning node ids
time: 0.012; rss: 65MB	lowering ast -> hir
time: 0.006; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.007; rss: 69MB	early lint checks
time: 0.004; rss: 69MB	external crate/lib resolution
time: 0.002; rss: 69MB	language item collection
time: 0.039; rss: 92MB	resolution
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.001; rss: 91MB	looking for plugin registrar
time: 0.010; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.013; rss: 98MB	type collecting
time: 0.003; rss: 98MB	variance inference
time: 0.040; rss: 114MB	coherence checking
time: 0.026; rss: 116MB	wf checking (old)
time: 0.050; rss: 116MB	item-types checking
time: 1.621; rss: 151MB	item-bodies checking
time: 0.000; rss: 151MB	drop-impl checking
time: 0.136; rss: 151MB	wf checking (new)
time: 0.080; rss: 153MB	const checking
time: 0.013; rss: 153MB	privacy checking
time: 0.000; rss: 153MB	stability index
time: 0.010; rss: 153MB	intrinsic checking
time: 0.003; rss: 153MB	effect checking
time: 0.025; rss: 153MB	match checking
time: 0.098; rss: 178MB	MIR dump
time: 0.012; rss: 163MB	liveness checking
time: 0.162; rss: 162MB	borrow checking
time: 0.097; rss: 162MB	rvalue checking
time: 0.003; rss: 162MB	reachability checking
time: 0.011; rss: 162MB	death checking
time: 0.008; rss: 162MB	stability checking
time: 0.000; rss: 162MB	unused lib feature checking
time: 0.073; rss: 163MB	lint checking
time: 0.000; rss: 163MB	resolving dependency formats
time: 2.879; rss: 281MB	translation
  time: 0.097; rss: 166MB	llvm function passes [0]
  time: 0.044; rss: 166MB	llvm module passes [0]
  time: 1.728; rss: 215MB	codegen passes [0]
  time: 0.001; rss: 183MB	codegen passes [0]
time: 2.067; rss: 183MB	LLVM passes
time: 0.153; rss: 183MB	linking
done
