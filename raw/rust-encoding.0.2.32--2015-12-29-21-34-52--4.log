commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.030; rss: 29MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.007; rss: 29MB	configuration 1
time: 0.000; rss: 29MB	recursion limit
time: 0.000; rss: 29MB	gated macro checking
time: 0.000; rss: 29MB	crate injection
time: 0.003; rss: 32MB	macro loading
time: 0.000; rss: 32MB	plugin loading
time: 0.000; rss: 32MB	plugin registration
time: 0.049; rss: 35MB	expansion
time: 0.001; rss: 35MB	complete gated feature checking 1
time: 0.008; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.004; rss: 35MB	maybe building test harness
time: 0.004; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 35MB	complete gated feature checking 2
Post-expansion node count: 41783
time: 0.004; rss: 35MB	assigning node ids
time: 0.004; rss: 36MB	lowering ast -> hir
time: 0.002; rss: 37MB	indexing hir
time: 0.000; rss: 37MB	attribute checking
time: 0.002; rss: 37MB	early lint checks
time: 0.001; rss: 37MB	external crate/lib resolution
time: 0.000; rss: 37MB	language item collection
time: 0.012; rss: 45MB	resolution
time: 0.001; rss: 45MB	lifetime resolution
time: 0.000; rss: 45MB	looking for entry point
time: 0.000; rss: 45MB	looking for plugin registrar
time: 0.003; rss: 47MB	region resolution
time: 0.000; rss: 47MB	loop checking
time: 0.000; rss: 47MB	static item recursion checking
time: 0.005; rss: 49MB	type collecting
time: 0.000; rss: 49MB	variance inference
time: 0.020; rss: 67MB	coherence checking
time: 0.014; rss: 67MB	wf checking
time: 0.016; rss: 69MB	item-types checking
time: 0.208; rss: 82MB	item-bodies checking
time: 0.000; rss: 82MB	drop-impl checking
time: 0.012; rss: 82MB	const checking
time: 0.003; rss: 82MB	privacy checking
time: 0.000; rss: 82MB	stability index
time: 0.001; rss: 82MB	intrinsic checking
time: 0.000; rss: 82MB	effect checking
time: 0.006; rss: 82MB	match checking
time: 0.023; rss: 85MB	MIR dump
time: 0.002; rss: 85MB	liveness checking
time: 0.024; rss: 86MB	borrow checking
time: 0.007; rss: 86MB	rvalue checking
time: 0.000; rss: 86MB	reachability checking
time: 0.002; rss: 86MB	death checking
time: 0.002; rss: 86MB	stability checking
time: 0.000; rss: 86MB	unused lib feature checking
time: 0.019; rss: 86MB	lint checking
time: 0.000; rss: 86MB	resolving dependency formats
time: 0.002; rss: 86MB	erasing regions from MIR
time: 0.405; rss: 134MB	translation
  time: 0.028; rss: 101MB	llvm function passes [0]
  time: 0.062; rss: 104MB	llvm module passes [0]
  time: 0.557; rss: 125MB	codegen passes [0]
  time: 0.000; rss: 123MB	codegen passes [0]
time: 0.718; rss: 123MB	LLVM passes
time: 0.055; rss: 123MB	linking
done
