commit b1d07bbe701641e3841c81da808159ef1710f70e
Merge: 3a407b6 4c8d75f
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 21 05:04:32 2015 +0000

    Auto merge of #27837 - Gankro:weaknique, r=aturon
    
    This prepares both for the FCP of #27718
    
    Arc:
    
    * Add previously omitted function `Arc::try_unwrap(Self) -> Result<T, Self>`
    * Move `arc.downgrade()` to `Arc::downgrade(&Self)` per conventions.
    * Deprecate `Arc::weak_count` and `Arc::strong_count` for raciness. It is almost
      impossible to correctly act on these results without a CAS loop on the actual
      fields.
    * Rename `Arc::make_unique` to `Arc::make_mut` to avoid uniqueness terminology
      and to clarify relation to `Arc::get_mut`.
    
    
    Rc:
    * Add `Rc::would_unwrap(&Self) -> bool` to introspect whether try_unwrap would succeed,
      because it's destructive (unlike get_mut).
    * Move `rc.downgrade()` to `Rc::downgrade(&Self)` per conventions.
    * Deprecate `Rc::weak_count` and `Rc::strong_count` for questionable utility.
    * Deprecate `Rc::is_unique` for questionable semantics (there are two kinds of
      uniqueness with Weak pointers in play).
    * Rename `rc.make_unique()` to `Rc::make_mut(&mut Self)` per conventions, to
      avoid uniqueness terminology, and to clarify the relation to `Rc::get_mut`.
    
    Notable omission:
    
    * Arc::would_unwrap is not added due to the fact that it's racy, and therefore doesn't
      provide much actionable information.
    
    (note: rc_would_unwrap is not proposed for FCP as it is truly experimental)
    
    
    r? @aturon (careful attention needs to be taken for the new Arc::try_unwrap, but intuitively it should "just work" by virtue of being semantically equivalent to Drop).
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000; rss: 29MB	parsing
time: 0.000; rss: 29MB	configuration 1
time: 0.000; rss: 29MB	recursion limit
time: 0.000; rss: 29MB	gated macro checking
time: 0.000; rss: 29MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.001; rss: 35MB	expansion
time: 0.000; rss: 35MB	complete gated feature checking 1
time: 0.000; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.000; rss: 35MB	maybe building test harness
time: 0.000; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	complete gated feature checking 2
time: 0.000; rss: 35MB	assigning node ids and indexing ast
time: 0.001; rss: 37MB	external crate/lib resolution
time: 0.000; rss: 37MB	language item collection
time: 0.001; rss: 42MB	resolution
time: 0.000; rss: 42MB	lifetime resolution
time: 0.000; rss: 42MB	looking for entry point
time: 0.000; rss: 42MB	looking for plugin registrar
time: 0.000; rss: 42MB	region resolution
time: 0.000; rss: 42MB	loop checking
time: 0.000; rss: 42MB	static item recursion checking
time: 0.000; rss: 42MB	type collecting
time: 0.000; rss: 42MB	variance inference
time: 0.005; rss: 50MB	coherence checking
time: 0.000; rss: 50MB	wf checking (old)
time: 0.000; rss: 50MB	item-types checking
time: 0.000; rss: 50MB	item-bodies checking
time: 0.000; rss: 50MB	drop-impl checking
time: 0.000; rss: 50MB	wf checking (new)
time: 0.000; rss: 50MB	const checking
time: 0.000; rss: 50MB	privacy checking
time: 0.000; rss: 50MB	stability index
time: 0.000; rss: 50MB	intrinsic checking
time: 0.000; rss: 50MB	effect checking
time: 0.000; rss: 50MB	match checking
time: 0.000; rss: 50MB	liveness checking
time: 0.000; rss: 54MB	borrow checking
time: 0.000; rss: 54MB	rvalue checking
time: 0.000; rss: 54MB	reachability checking
time: 0.000; rss: 54MB	death checking
time: 0.000; rss: 54MB	stability checking
time: 0.000; rss: 54MB	unused lib feature checking
time: 0.000; rss: 54MB	lint checking
time: 0.001; rss: 54MB	resolving dependency formats
time: 0.003; rss: 63MB	translation
  time: 0.000; rss: 65MB	llvm function passes
  time: 0.000; rss: 65MB	llvm module passes
  time: 0.001; rss: 67MB	codegen passes
  time: 0.000; rss: 67MB	codegen passes
time: 0.002; rss: 67MB	LLVM passes
  time: 0.082; rss: 73MB	running linker
time: 0.083; rss: 73MB	linking
done
