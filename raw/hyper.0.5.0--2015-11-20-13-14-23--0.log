commit 6a6b97cf025b8a1fb92fc48a4dc06611d2970861
Merge: 6827661 c1ad5af
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 20 18:13:10 2015 +0000

    Auto merge of #29822 - petrochenkov:pubexport, r=alexcrichton
    
    This patch implements the plan described in https://internals.rust-lang.org/t/privacy-and-its-interaction-with-docs-lints-and-stability/2880 with one deviation.
    
    It turns out, that rustdoc needs the "directly public" set for its docs inlining logic, so the privacy pass have to produce three sets and not two. Three is arguably too many, so I merged them in one map:
    `public_items/exported_items/reachable_items: NodeSet => access_levels: NodeMap<AccessLevel>`
    
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading num_cpus v0.2.9
   Compiling libc v0.2.2
   Compiling rustc-serialize v0.3.16
   Compiling bitflags v0.3.3
   Compiling httparse v0.1.6
   Compiling typeable v0.1.2
   Compiling gcc v0.3.19
   Compiling traitobject v0.0.1
   Compiling winapi v0.2.5
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling winapi-build v0.1.1
   Compiling pkg-config v0.3.6
   Compiling lazy_static v0.1.15
   Compiling libc v0.1.12
   Compiling kernel32-sys v0.2.1
   Compiling advapi32-sys v0.1.2
   Compiling log v0.3.3
   Compiling num_cpus v0.2.9
   Compiling time v0.1.34
   Compiling rand v0.3.12
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 38MB	parsing
time: 0.010; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.176; rss: 56MB	expansion
time: 0.006; rss: 56MB	complete gated feature checking 1
time: 0.032; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.014; rss: 56MB	maybe building test harness
time: 0.010; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.010; rss: 56MB	assigning node ids
time: 0.009; rss: 60MB	lowering ast -> hir
time: 0.005; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.006; rss: 62MB	early lint checks
time: 0.003; rss: 65MB	external crate/lib resolution
time: 0.001; rss: 65MB	language item collection
time: 0.031; rss: 89MB	resolution
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.014; rss: 96MB	type collecting
time: 0.000; rss: 96MB	variance inference
time: 0.041; rss: 110MB	coherence checking
time: 0.028; rss: 113MB	wf checking (old)
time: 0.026; rss: 113MB	item-types checking
time: 0.532; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.087; rss: 133MB	wf checking (new)
time: 0.042; rss: 133MB	const checking
time: 0.009; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.004; rss: 133MB	intrinsic checking
time: 0.002; rss: 133MB	effect checking
time: 0.013; rss: 133MB	match checking
time: 0.052; rss: 146MB	MIR dump
time: 0.006; rss: 148MB	liveness checking
time: 0.069; rss: 148MB	borrow checking
time: 0.034; rss: 148MB	rvalue checking
time: 0.003; rss: 148MB	reachability checking
time: 0.006; rss: 148MB	death checking
time: 0.005; rss: 148MB	stability checking
time: 0.000; rss: 148MB	unused lib feature checking
time: 0.042; rss: 148MB	lint checking
time: 0.000; rss: 148MB	resolving dependency formats
time: 0.007; rss: 150MB	erasing regions from MIR
time: 1.414; rss: 287MB	translation
  time: 0.100; rss: 176MB	llvm function passes [0]
  time: 0.052; rss: 177MB	llvm module passes [0]
  time: 1.678; rss: 221MB	codegen passes [0]
  time: 0.001; rss: 176MB	codegen passes [0]
time: 2.060; rss: 176MB	LLVM passes
time: 0.177; rss: 179MB	linking
done
