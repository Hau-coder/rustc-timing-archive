commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
time: 0.031; rss: 28MB	parsing
Lines of code:             6363
Pre-expansion node count:  28191
time: 0.007; rss: 29MB	configuration 1
time: 0.000; rss: 29MB	recursion limit
time: 0.000; rss: 29MB	gated macro checking
time: 0.000; rss: 29MB	crate injection
time: 0.047; rss: 43MB	macro loading
time: 0.001; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 3.545; rss: 64MB	expansion
time: 0.004; rss: 64MB	complete gated feature checking 1
time: 0.034; rss: 63MB	configuration 2
time: 0.000; rss: 63MB	gated configuration checking
time: 0.016; rss: 63MB	maybe building test harness
time: 0.015; rss: 63MB	prelude injection
time: 0.002; rss: 63MB	checking that all macro invocations are gone
time: 0.000; rss: 63MB	checking for inline asm in case the target doesn't support it
time: 0.004; rss: 63MB	complete gated feature checking 2
Post-expansion node count: 171717
time: 0.016; rss: 63MB	assigning node ids
time: 0.025; rss: 75MB	lowering ast -> hir
time: 0.006; rss: 80MB	indexing hir
time: 0.000; rss: 80MB	attribute checking
time: 0.009; rss: 80MB	early lint checks
time: 0.002; rss: 62MB	external crate/lib resolution
time: 0.002; rss: 62MB	language item collection
time: 0.026; rss: 75MB	resolution
time: 0.002; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.016; rss: 81MB	region resolution
time: 0.002; rss: 81MB	loop checking
time: 0.002; rss: 81MB	static item recursion checking
time: 0.008; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.035; rss: 109MB	coherence checking
time: 0.030; rss: 110MB	wf checking
time: 0.394; rss: 127MB	item-types checking
time: 0.644; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.086; rss: 145MB	const checking
time: 0.012; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.004; rss: 145MB	intrinsic checking
time: 0.003; rss: 145MB	effect checking
time: 0.036; rss: 145MB	match checking
time: 0.076; rss: 151MB	MIR dump
time: 0.014; rss: 149MB	liveness checking
time: 0.116; rss: 157MB	borrow checking
time: 0.040; rss: 157MB	rvalue checking
time: 0.003; rss: 157MB	reachability checking
time: 0.007; rss: 157MB	death checking
time: 0.009; rss: 157MB	stability checking
time: 0.000; rss: 157MB	unused lib feature checking
time: 0.078; rss: 157MB	lint checking
time: 0.000; rss: 157MB	resolving dependency formats
time: 0.007; rss: 157MB	erasing regions from MIR
time: 0.568; rss: 195MB	translation
  time: 0.018; rss: 111MB	llvm function passes [0]
  time: 0.007; rss: 112MB	llvm module passes [0]
  time: 0.330; rss: 149MB	codegen passes [0]
  time: 0.001; rss: 124MB	codegen passes [0]
time: 0.413; rss: 124MB	LLVM passes
time: 0.061; rss: 125MB	linking
done
