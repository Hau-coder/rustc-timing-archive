commit 8a3f5af8c98e123247a2847c52474f42874d23fa
Merge: 7b0f2af cb7d914
Author: bors <bors@rust-lang.org>
Date:   Tue Jun 9 18:26:26 2015 +0000

    Auto merge of #25995 - alexcrichton:msvc-md, r=brson
    
    On MSVC there are two ways that the CRT can be linked, either statically or
    dynamically. Each object file produced by the compiler is compiled against
    msvcrt (a dll) or libcmt (a static library). When the linker is dealing with
    more than one object file, it requires that all object files link to the same
    CRT, or else the linker will spit out some errors.
    
    For now, compile code with `-MD` as it seems to appear more often in C libraries
    so we'll stick with the same trend.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023 	parsing
time: 0.006 	configuration 1
time: 0.000 	recursion limit
time: 0.000 	gated macro checking
time: 0.000 	crate injection
time: 0.002 	macro loading
time: 0.000 	plugin loading
time: 0.000 	plugin registration
time: 0.050 	expansion
time: 0.001 	complete gated feature checking 1
time: 0.007 	configuration 2
time: 0.004 	maybe building test harness
time: 0.003 	prelude injection
time: 0.000 	checking that all macro invocations are gone
time: 0.001 	complete gated feature checking 2
time: 0.004 	assigning node ids and indexing ast
time: 0.000 	external crate/lib resolution
time: 0.000 	language item collection
time: 0.012 	resolution
time: 0.000 	lifetime resolution
time: 0.000 	looking for entry point
time: 0.000 	looking for plugin registrar
time: 0.003 	region resolution
time: 0.000 	loop checking
time: 0.000 	static item recursion checking
time: 0.004 	type collecting
time: 0.000 	variance inference
time: 0.068 	coherence checking
time: 0.310 	type checking
time: 0.017 	const checking
time: 0.002 	privacy checking
time: 0.000 	stability index
time: 0.001 	intrinsic checking
time: 0.000 	effect checking
time: 0.005 	match checking
time: 0.002 	liveness checking
time: 0.027 	borrow checking
time: 0.010 	rvalue checking
time: 0.000 	reachability checking
time: 0.002 	death checking
time: 0.002 	stability checking
time: 0.000 	unused lib feature checking
time: 0.017 	lint checking
time: 0.000 	resolving dependency formats
time: 0.448 	translation
  time: 0.026 	llvm function passes
  time: 0.058 	llvm module passes
  time: 0.624 	codegen passes
  time: 0.001 	codegen passes
time: 0.782 	LLVM passes
time: 0.062 	linking
done
