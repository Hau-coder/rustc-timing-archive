commit 8f031bf96205ed4cb990c2c7aded84d5ac079254
Merge: 44d9601 ec8ea22
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 15 01:18:01 2015 +0000

    Auto merge of #30105 - faineance:master, r=nrc
    
    Issue: #30058
    Updated for:
     - Stmt
     - BinOp_
     - UnOp
     - UintTy, IntTy and FloatTy
     - Lit
     - Generics
    
    A possible inconsistancy?
    The `Stmt` methods are on the spanned varient:
    ```rust
    pub type Stmt = Spanned<Stmt_>;
    
    impl Stmt {
        pub fn id(s: &Stmt) -> Option<NodeId> {
            match s.node {
              StmtDecl(_, id) => Some(id),
              StmtExpr(_, id) => Some(id),
              StmtSemi(_, id) => Some(id),
              StmtMac(..) => None,
          }
      }
    }
    ```
    Whilst the methods for BinOp are on the non spanned version.
    ````rust
    impl BinOp_ {
        pub fn to_string(op: BinOp_) -> &'static str { ... }
        pub fn lazy(b: BinOp_) -> bool { ... }
    
        pub fn is_shift(b: BinOp_) -> bool { ... }
        pub fn is_comparison(b: BinOp_) -> bool { ... }
        /// Returns `true` if the binary operator takes its arguments by value
        pub fn is_by_value(b: BinOp_) -> bool { ... }
    
    }
    pub type BinOp = Spanned<BinOp_>;
    ````
    r? @Manishearth
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.054; rss: 47MB	parsing
time: 0.011; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.060; rss: 53MB	expansion
time: 0.001; rss: 53MB	complete gated feature checking 1
time: 0.014; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.006; rss: 53MB	maybe building test harness
time: 0.006; rss: 53MB	prelude injection
time: 0.000; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 53MB	complete gated feature checking 2
time: 0.007; rss: 53MB	assigning node ids
time: 0.009; rss: 62MB	lowering ast -> hir
time: 0.002; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.004; rss: 64MB	early lint checks
time: 0.001; rss: 64MB	external crate/lib resolution
time: 0.001; rss: 64MB	language item collection
time: 0.008; rss: 73MB	resolution
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.005; rss: 79MB	region resolution
time: 0.001; rss: 79MB	loop checking
time: 0.001; rss: 79MB	static item recursion checking
time: 0.004; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.021; rss: 99MB	coherence checking
time: 0.005; rss: 99MB	wf checking (old)
time: 0.091; rss: 101MB	item-types checking
time: 0.213; rss: 116MB	item-bodies checking
time: 0.000; rss: 116MB	drop-impl checking
time: 0.011; rss: 116MB	wf checking (new)
time: 0.027; rss: 118MB	const checking
time: 0.004; rss: 118MB	privacy checking
time: 0.000; rss: 118MB	stability index
time: 0.001; rss: 118MB	intrinsic checking
time: 0.001; rss: 118MB	effect checking
time: 0.003; rss: 118MB	match checking
time: 0.015; rss: 120MB	MIR dump
time: 0.003; rss: 122MB	liveness checking
time: 0.020; rss: 122MB	borrow checking
time: 0.007; rss: 122MB	rvalue checking
time: 0.000; rss: 122MB	reachability checking
time: 0.002; rss: 122MB	death checking
time: 0.002; rss: 122MB	stability checking
time: 0.000; rss: 122MB	unused lib feature checking
time: 0.028; rss: 122MB	lint checking
time: 0.000; rss: 122MB	resolving dependency formats
time: 0.002; rss: 122MB	erasing regions from MIR
time: 0.663; rss: 189MB	translation
  time: 0.038; rss: 121MB	llvm function passes [0]
  time: 0.020; rss: 122MB	llvm module passes [0]
  time: 0.621; rss: 147MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 0.760; rss: 134MB	LLVM passes
time: 0.067; rss: 133MB	linking
done
