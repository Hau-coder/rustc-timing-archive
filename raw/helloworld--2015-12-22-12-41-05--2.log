commit 45e52dadb8548dcbe8da91fe624dd991b4994e70
Merge: 42c3ef8 9bff8b0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 23 00:42:19 2015 +0000

    Auto merge of #30353 - alexcrichton:rpath-by-default, r=brson
    
    This commit changes our distribution and in-tree sources to pass the `-C rpath`
    flag by default during compiles. This means that from-source builds, including
    our release channels, will have this option enabled as well. Motivated
    by #29941, this change means that the compiler should be usable as-is on all
    platforms just after extraction or installation. This experience is already true
    on Windows but on Unixes you still need to set up LD_LIBRARY_PATH or the
    equivalent, which can often be unfortunate.
    
    This option was originally turned off by default for Linux distributions who
    tend to take care of these sorts of details themselves, so it is expected that
    all those builds of Rust will want to pass `--disable-rpath` to the configure
    script to preserve that behavior.
    
    Closes #29941
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes
time: 0.000; rss: 31MB	parsing
time: 0.000; rss: 31MB	configuration 1
time: 0.000; rss: 31MB	recursion limit
time: 0.000; rss: 31MB	gated macro checking
time: 0.000; rss: 31MB	crate injection
time: 0.003; rss: 37MB	macro loading
time: 0.000; rss: 37MB	plugin loading
time: 0.000; rss: 37MB	plugin registration
time: 0.001; rss: 37MB	expansion
time: 0.000; rss: 37MB	complete gated feature checking 1
time: 0.000; rss: 37MB	configuration 2
time: 0.000; rss: 37MB	gated configuration checking
time: 0.000; rss: 37MB	maybe building test harness
time: 0.000; rss: 37MB	prelude injection
time: 0.000; rss: 37MB	checking that all macro invocations are gone
time: 0.000; rss: 37MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 37MB	complete gated feature checking 2
time: 0.000; rss: 37MB	assigning node ids
time: 0.000; rss: 37MB	lowering ast -> hir
time: 0.000; rss: 37MB	indexing hir
time: 0.000; rss: 37MB	attribute checking
time: 0.000; rss: 37MB	early lint checks
time: 0.001; rss: 37MB	external crate/lib resolution
time: 0.000; rss: 37MB	language item collection
time: 0.001; rss: 45MB	resolution
time: 0.000; rss: 45MB	lifetime resolution
time: 0.000; rss: 45MB	looking for entry point
time: 0.000; rss: 45MB	looking for plugin registrar
time: 0.000; rss: 45MB	region resolution
time: 0.000; rss: 45MB	loop checking
time: 0.000; rss: 45MB	static item recursion checking
time: 0.000; rss: 45MB	type collecting
time: 0.000; rss: 45MB	variance inference
time: 0.005; rss: 54MB	coherence checking
time: 0.000; rss: 54MB	wf checking
time: 0.000; rss: 54MB	item-types checking
time: 0.000; rss: 54MB	item-bodies checking
time: 0.000; rss: 54MB	drop-impl checking
time: 0.000; rss: 54MB	const checking
time: 0.000; rss: 54MB	privacy checking
time: 0.000; rss: 54MB	stability index
time: 0.000; rss: 54MB	intrinsic checking
time: 0.000; rss: 54MB	effect checking
time: 0.000; rss: 54MB	match checking
time: 0.000; rss: 54MB	MIR dump
time: 0.000; rss: 54MB	liveness checking
time: 0.000; rss: 54MB	borrow checking
time: 0.000; rss: 54MB	rvalue checking
time: 0.000; rss: 54MB	reachability checking
time: 0.000; rss: 54MB	death checking
time: 0.000; rss: 54MB	stability checking
time: 0.000; rss: 54MB	unused lib feature checking
time: 0.000; rss: 54MB	lint checking
time: 0.001; rss: 54MB	resolving dependency formats
time: 0.000; rss: 54MB	erasing regions from MIR
time: 0.004; rss: 65MB	translation
  time: 0.000; rss: 67MB	llvm function passes [0]
  time: 0.000; rss: 67MB	llvm module passes [0]
  time: 0.001; rss: 69MB	codegen passes [0]
  time: 0.000; rss: 69MB	codegen passes [0]
time: 0.002; rss: 69MB	LLVM passes
  time: 0.089; rss: 75MB	running linker
time: 0.090; rss: 75MB	linking
done
