commit b289892b5d4acd52237fb88ab12f825e7602280c
Merge: 6861c51 c6eb852
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 19 23:57:07 2015 +0000

    Auto merge of #29894 - alexcrichton:stdtime, r=brson
    
    This commit is an implementation of [RFC 1288][rfc] which adds two new unstable
    types to the `std::time` module. The `Instant` type is used to represent
    measurements of a monotonically increasing clock suitable for measuring time
    withing a process for operations such as benchmarks or just the elapsed time to
    do something. An `Instant` favors panicking when bugs are found as the bugs are
    programmer errors rather than typical errors that can be encountered.
    
    [rfc]: https://github.com/rust-lang/rfcs/pull/1288
    
    The `SystemTime` type is used to represent a system timestamp and is not
    monotonic. Very few guarantees are provided about this measurement of the system
    clock, but a fixed point in time (`UNIX_EPOCH`) is provided to learn about the
    relative distance from this point for any particular time stamp.
    
    This PR takes the same implementation strategy as the `time` crate on crates.io,
    namely:
    
    |  Platform  |  Instant                 |  SystemTime              |
    |------------|--------------------------|--------------------------|
    | Windows    | QueryPerformanceCounter  | GetSystemTimeAsFileTime  |
    | OSX        | mach_absolute_time       | gettimeofday             |
    | Unix       | CLOCK_MONOTONIC          | CLOCK_REALTIME           |
    
    These implementations can perhaps be refined over time, but they currently
    satisfy the requirements of the `Instant` and `SystemTime` types while also
    being portable across implementations and revisions of each platform.
    
    cc #29866
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 38MB	parsing
time: 0.009; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.175; rss: 56MB	expansion
time: 0.005; rss: 56MB	complete gated feature checking 1
time: 0.029; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.013; rss: 56MB	maybe building test harness
time: 0.010; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.010; rss: 56MB	assigning node ids
time: 0.008; rss: 60MB	lowering ast -> hir
time: 0.005; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.005; rss: 62MB	early lint checks
time: 0.003; rss: 64MB	external crate/lib resolution
time: 0.001; rss: 64MB	language item collection
time: 0.030; rss: 87MB	resolution
time: 0.002; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.006; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.013; rss: 94MB	type collecting
time: 0.000; rss: 94MB	variance inference
time: 0.040; rss: 113MB	coherence checking
time: 0.027; rss: 115MB	wf checking (old)
time: 0.025; rss: 115MB	item-types checking
time: 0.529; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.087; rss: 131MB	wf checking (new)
time: 0.042; rss: 131MB	const checking
time: 0.009; rss: 131MB	privacy checking
time: 0.001; rss: 131MB	stability index
time: 0.004; rss: 131MB	intrinsic checking
time: 0.002; rss: 131MB	effect checking
time: 0.013; rss: 131MB	match checking
time: 0.052; rss: 144MB	MIR dump
time: 0.006; rss: 146MB	liveness checking
time: 0.068; rss: 146MB	borrow checking
time: 0.034; rss: 146MB	rvalue checking
time: 0.003; rss: 146MB	reachability checking
time: 0.006; rss: 146MB	death checking
time: 0.005; rss: 146MB	stability checking
time: 0.000; rss: 146MB	unused lib feature checking
time: 0.041; rss: 146MB	lint checking
time: 0.000; rss: 146MB	resolving dependency formats
time: 0.007; rss: 151MB	erasing regions from MIR
time: 1.396; rss: 287MB	translation
  time: 0.099; rss: 177MB	llvm function passes [0]
  time: 0.053; rss: 177MB	llvm module passes [0]
  time: 1.676; rss: 222MB	codegen passes [0]
  time: 0.001; rss: 176MB	codegen passes [0]
time: 2.061; rss: 176MB	LLVM passes
time: 0.183; rss: 179MB	linking
done
