commit acf4e0be22203213a5e42469deea4dc6e49da840
Merge: 8864f2c ca88e9c
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 7 22:28:45 2015 +0000

    Auto merge of #30087 - petrochenkov:indi, r=nrc
    
    I've measured the time/memory consumption before and after - the difference is lost in statistical noise, so it's mostly a code simplification.
    Sizes of `enum`s are not affected.
    
    r? @nrc
    
    I wonder if AST/HIR visitors could run faster if `P`s are systematically removed (except for cases where they control `enum` sizes). Theoretically they should.
    Remaining unnecessary `P`s can't be easily removed because many folders accept `P<X>`s as arguments, but these folders can be converted to accept `X`s instead without loss of efficiency.
    When I have a mood for some mindless refactoring again, I'll probably try to convert the folders, remove remaining `P`s and measure again.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.044; rss: 46MB	parsing
time: 0.017; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.001; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.005; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.119; rss: 55MB	expansion
time: 0.004; rss: 55MB	complete gated feature checking 1
time: 0.027; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.013; rss: 55MB	maybe building test harness
time: 0.012; rss: 55MB	prelude injection
time: 0.001; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 55MB	complete gated feature checking 2
time: 0.012; rss: 55MB	assigning node ids
time: 0.012; rss: 66MB	lowering ast -> hir
time: 0.006; rss: 70MB	indexing hir
time: 0.000; rss: 70MB	attribute checking
time: 0.007; rss: 70MB	early lint checks
time: 0.002; rss: 70MB	external crate/lib resolution
time: 0.001; rss: 70MB	language item collection
time: 0.038; rss: 90MB	resolution
time: 0.003; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.010; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.012; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.035; rss: 117MB	coherence checking
time: 0.026; rss: 119MB	wf checking (old)
time: 0.052; rss: 125MB	item-types checking
time: 1.610; rss: 157MB	item-bodies checking
time: 0.000; rss: 157MB	drop-impl checking
time: 0.138; rss: 157MB	wf checking (new)
time: 0.072; rss: 157MB	const checking
time: 0.011; rss: 157MB	privacy checking
time: 0.001; rss: 157MB	stability index
time: 0.010; rss: 157MB	intrinsic checking
time: 0.003; rss: 157MB	effect checking
time: 0.025; rss: 157MB	match checking
time: 0.091; rss: 172MB	MIR dump
time: 0.011; rss: 172MB	liveness checking
time: 0.152; rss: 172MB	borrow checking
time: 0.076; rss: 172MB	rvalue checking
time: 0.003; rss: 172MB	reachability checking
time: 0.009; rss: 172MB	death checking
time: 0.008; rss: 172MB	stability checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.083; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
time: 0.008; rss: 172MB	erasing regions from MIR
time: 2.760; rss: 286MB	translation
  time: 0.099; rss: 169MB	llvm function passes [0]
  time: 0.044; rss: 170MB	llvm module passes [0]
  time: 1.740; rss: 219MB	codegen passes [0]
  time: 0.001; rss: 186MB	codegen passes [0]
time: 2.089; rss: 186MB	LLVM passes
time: 0.151; rss: 186MB	linking
done
