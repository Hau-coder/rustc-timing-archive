commit 41308a05203c342ae0899d80b1bc3657de7fec8b
Merge: 1dac3ad 4b43e07
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 6 00:56:08 2015 +0000

    Auto merge of #29305 - alexcrichton:bad-getenv, r=brson
    
    As discovered in #29298, `env::set_var("", "")` will panic, but it turns out
    that it *also* deadlocks on Unix systems. This happens because if a panic
    happens while holding the environment lock, we then go try to read
    RUST_BACKTRACE, grabbing the environment lock, causing a deadlock.
    
    Specifically, the changes made here are:
    
    * The environment lock is pushed into `std::sys` instead of `std::env`. This
      also only puts it in the Unix implementation, not Windows where the functions
      are already threadsafe.
    * The `std::sys` implementation now returns `io::Result` so panics are
      explicitly at the `std::env` level.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes
time: 0.000; rss: 29MB	parsing
time: 0.000; rss: 29MB	configuration 1
time: 0.000; rss: 33MB	recursion limit
time: 0.000; rss: 33MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.001; rss: 35MB	expansion
time: 0.000; rss: 35MB	complete gated feature checking 1
time: 0.000; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.000; rss: 35MB	maybe building test harness
time: 0.000; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 35MB	complete gated feature checking 2
time: 0.000; rss: 35MB	assigning node ids
time: 0.000; rss: 35MB	lowering ast -> hir
time: 0.000; rss: 35MB	indexing hir
time: 0.000; rss: 35MB	attribute checking
time: 0.000; rss: 35MB	early lint checks
time: 0.001; rss: 35MB	external crate/lib resolution
time: 0.000; rss: 35MB	language item collection
time: 0.001; rss: 39MB	resolution
time: 0.000; rss: 39MB	lifetime resolution
time: 0.000; rss: 39MB	looking for entry point
time: 0.000; rss: 39MB	looking for plugin registrar
time: 0.000; rss: 39MB	region resolution
time: 0.000; rss: 39MB	loop checking
time: 0.000; rss: 39MB	static item recursion checking
time: 0.000; rss: 43MB	type collecting
time: 0.000; rss: 43MB	variance inference
time: 0.004; rss: 48MB	coherence checking
time: 0.000; rss: 48MB	wf checking (old)
time: 0.000; rss: 48MB	item-types checking
time: 0.000; rss: 48MB	item-bodies checking
time: 0.000; rss: 48MB	drop-impl checking
time: 0.000; rss: 48MB	wf checking (new)
time: 0.000; rss: 48MB	const checking
time: 0.000; rss: 52MB	privacy checking
time: 0.000; rss: 52MB	stability index
time: 0.000; rss: 52MB	intrinsic checking
time: 0.000; rss: 52MB	effect checking
time: 0.000; rss: 52MB	match checking
time: 0.000; rss: 52MB	MIR dump
time: 0.000; rss: 52MB	liveness checking
time: 0.000; rss: 52MB	borrow checking
time: 0.000; rss: 52MB	rvalue checking
time: 0.000; rss: 52MB	reachability checking
time: 0.000; rss: 52MB	death checking
time: 0.000; rss: 52MB	stability checking
time: 0.000; rss: 52MB	unused lib feature checking
time: 0.000; rss: 52MB	lint checking
time: 0.001; rss: 52MB	resolving dependency formats
time: 0.004; rss: 62MB	translation
  time: 0.000; rss: 64MB	llvm function passes [0]
  time: 0.000; rss: 64MB	llvm module passes [0]
  time: 0.001; rss: 65MB	codegen passes [0]
  time: 0.000; rss: 65MB	codegen passes [0]
time: 0.002; rss: 65MB	LLVM passes
  time: 0.086; rss: 71MB	running linker
time: 0.086; rss: 71MB	linking
done
