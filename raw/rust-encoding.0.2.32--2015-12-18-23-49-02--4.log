commit 440ef8b1548edf9d03a5b880d77a8b476cfb7fa2
Merge: 8ad12c3 95fdaf2
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 02:45:15 2015 +0000

    Auto merge of #30184 - petrochenkov:ascr, r=nikomatsakis
    
    This PR is a rebase of the original PR by @eddyb https://github.com/rust-lang/rust/pull/21836 with some unrebasable parts manually reapplied, feature gate added + type equality restriction added as described below.
    
    This implementation is partial because the type equality restriction is applied to all type ascription expressions and not only those in lvalue contexts. Thus, all difficulties with detection of these contexts and translation of coercions having effect in runtime are avoided.
    So, you can't write things with coercions like `let slice = &[1, 2, 3]: &[u8];`. It obviously makes type ascription less useful than it should be, but it's still much more useful than not having type ascription at all.
    In particular, things like `let v = something.iter().collect(): Vec<_>;` and `let u = t.into(): U;` work as expected and I'm pretty happy with these improvements alone.
    
    Part of https://github.com/rust-lang/rust/issues/23416
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 41MB	parsing
time: 0.006; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.003; rss: 44MB	macro loading
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.048; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.008; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.004; rss: 45MB	maybe building test harness
time: 0.004; rss: 45MB	prelude injection
time: 0.000; rss: 45MB	checking that all macro invocations are gone
time: 0.000; rss: 45MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 45MB	complete gated feature checking 2
time: 0.004; rss: 45MB	assigning node ids
time: 0.005; rss: 49MB	lowering ast -> hir
time: 0.001; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.008; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 63MB	type collecting
time: 0.000; rss: 63MB	variance inference
time: 0.020; rss: 84MB	coherence checking
time: 0.014; rss: 84MB	wf checking
time: 0.013; rss: 84MB	item-types checking
time: 0.198; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.011; rss: 96MB	const checking
time: 0.002; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.000; rss: 96MB	effect checking
time: 0.006; rss: 96MB	match checking
time: 0.019; rss: 100MB	MIR dump
time: 0.002; rss: 100MB	liveness checking
time: 0.023; rss: 100MB	borrow checking
time: 0.007; rss: 100MB	rvalue checking
time: 0.000; rss: 100MB	reachability checking
time: 0.002; rss: 100MB	death checking
time: 0.002; rss: 100MB	stability checking
time: 0.000; rss: 100MB	unused lib feature checking
time: 0.017; rss: 100MB	lint checking
time: 0.000; rss: 100MB	resolving dependency formats
time: 0.002; rss: 100MB	erasing regions from MIR
time: 0.363; rss: 155MB	translation
  time: 0.028; rss: 115MB	llvm function passes [0]
  time: 0.062; rss: 117MB	llvm module passes [0]
  time: 0.575; rss: 138MB	codegen passes [0]
  time: 0.001; rss: 136MB	codegen passes [0]
time: 0.735; rss: 136MB	LLVM passes
time: 0.055; rss: 135MB	linking
done
