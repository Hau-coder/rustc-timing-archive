commit 42c3ef8f9fd4b0dd1f881c49323bad456163f202
Merge: 5178449 cd74364
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 22 09:15:29 2015 +0000

    Auto merge of #30417 - alexcrichton:better-detect-elf-tls, r=alexcrichton
    
    Currently a compiler can be built with the `--disable-elf-tls` option for compatibility with OSX 10.6 which doesn't have ELF TLS. This is unfortunate, however, as a whole new compiler must be generated which can take some time. These commits add a new (feature gated) `cfg(target_thread_local)` annotation set by the compiler which indicates whether `#[thread_local]` is available for use. The compiler now interprets `MACOSX_DEPLOYMENT_TARGET` (a standard environment variable) to set this flag on OSX. With this we may want to start compiling our OSX nightlies with `MACOSX_DEPLOYMENT_TARGET` set to 10.6 which would allow the compiler out-of-the-box to generate 10.6-compatible binaries.
    
    For now the compiler still by default targets OSX 10.7 by allowing ELF TLS by default (e.g. if `MACOSX_DEPLOYMENT_TARGET` isn't set).
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling lzw v0.8.0
   Compiling color_quant v1.0.0
   Compiling byteorder v0.3.13
   Compiling libc v0.2.4
   Compiling bitflags v0.3.3
   Compiling rustc-serialize v0.3.16
   Compiling winapi v0.2.5
   Compiling winapi-build v0.1.1
   Compiling gcc v0.3.21
   Compiling glob v0.2.10
   Compiling advapi32-sys v0.1.2
   Compiling gif v0.5.1
   Compiling rand v0.3.12
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.11
   Compiling num v0.1.29
   Compiling enum_primitive v0.0.1
   Compiling png v0.3.1
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.043; rss: 47MB	parsing
time: 0.017; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.005; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.120; rss: 56MB	expansion
time: 0.004; rss: 56MB	complete gated feature checking 1
time: 0.026; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.013; rss: 56MB	maybe building test harness
time: 0.012; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.012; rss: 56MB	assigning node ids
time: 0.020; rss: 69MB	lowering ast -> hir
time: 0.006; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.007; rss: 71MB	early lint checks
time: 0.002; rss: 71MB	external crate/lib resolution
time: 0.001; rss: 71MB	language item collection
time: 0.028; rss: 94MB	resolution
time: 0.003; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.010; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.012; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.035; rss: 127MB	coherence checking
time: 0.130; rss: 131MB	wf checking
time: 0.049; rss: 133MB	item-types checking
time: 1.603; rss: 169MB	item-bodies checking
time: 0.000; rss: 169MB	drop-impl checking
time: 0.072; rss: 169MB	const checking
time: 0.012; rss: 169MB	privacy checking
time: 0.001; rss: 169MB	stability index
time: 0.010; rss: 169MB	intrinsic checking
time: 0.003; rss: 169MB	effect checking
time: 0.025; rss: 169MB	match checking
time: 0.095; rss: 181MB	MIR dump
time: 0.011; rss: 184MB	liveness checking
time: 0.150; rss: 184MB	borrow checking
time: 0.077; rss: 184MB	rvalue checking
time: 0.003; rss: 184MB	reachability checking
time: 0.008; rss: 184MB	death checking
time: 0.010; rss: 184MB	stability checking
time: 0.000; rss: 184MB	unused lib feature checking
time: 0.082; rss: 184MB	lint checking
time: 0.000; rss: 184MB	resolving dependency formats
time: 0.008; rss: 184MB	erasing regions from MIR
time: 2.885; rss: 301MB	translation
  time: 0.097; rss: 177MB	llvm function passes [0]
  time: 0.045; rss: 178MB	llvm module passes [0]
  time: 1.721; rss: 229MB	codegen passes [0]
  time: 0.001; rss: 196MB	codegen passes [0]
time: 2.065; rss: 196MB	LLVM passes
time: 0.153; rss: 194MB	linking
done
