commit 71409184dc00604537ce03312dc17ba986c329d9
Merge: 6d43fef 0332ee9
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 1 17:15:29 2015 +0000

    Auto merge of #29177 - vadimcn:rtstuff, r=alexcrichton
    
    Note: for now, this change only affects `-windows-gnu` builds.
    
    So why was this `libgcc` dylib dependency needed in the first place?
    The stack unwinder needs to know about locations of unwind tables of all the modules loaded in the current process.  The easiest portable way of achieving this is to have each module register itself with the unwinder when loaded into the process.  All modules compiled by GCC do this by calling the __register_frame_info() in their startup code (that's `crtbegin.o` and `crtend.o`, which are automatically linked into any gcc output).
    Another important piece is that there should be only one copy of the unwinder (and thus unwind tables registry) in the process.  This pretty much means that the unwinder must be in a shared library (unless everything is statically linked).
    
    Now, Rust compiler tries very hard to make sure that any given Rust crate appears in the final output just once.   So if we link the unwinder statically to one of Rust's crates, everything should be fine.
    
    Unfortunately, GCC startup objects are built under assumption that `libgcc` is the one true place for the unwind info registry, so I couldn't find any better way than to replace them.  So out go `crtbegin`/`crtend`, in come `rsbegin`/`rsend`!
    
    A side benefit of this change is that rustc is now more in control of the command line that goes to the linker, so we could stop using `gcc` as the linker driver and just invoke `ld` directly.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.2
   Compiling matches v0.1.2
   Compiling libc v0.1.12
   Compiling lazy_static v0.1.15
   Compiling winapi v0.2.4
   Compiling traitobject v0.0.1
   Compiling pkg-config v0.3.6
   Compiling typeable v0.1.2
   Compiling httparse v0.1.6
   Compiling rustc-serialize v0.3.16
   Compiling winapi-build v0.1.1
   Compiling gcc v0.3.19
   Compiling num_cpus v0.2.7
   Compiling log v0.3.3
   Compiling kernel32-sys v0.1.4
   Compiling time v0.1.33
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling url v0.2.37
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.027; rss: 38MB	parsing
time: 0.009; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.004; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.170; rss: 55MB	expansion
time: 0.006; rss: 55MB	complete gated feature checking 1
time: 0.032; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.013; rss: 55MB	maybe building test harness
time: 0.010; rss: 55MB	prelude injection
time: 0.001; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 55MB	complete gated feature checking 2
time: 0.010; rss: 55MB	assigning node ids
time: 0.009; rss: 60MB	lowering ast -> hir
time: 0.005; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.006; rss: 62MB	early lint checks
time: 0.003; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.032; rss: 87MB	resolution
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.001; rss: 89MB	looking for plugin registrar
time: 0.005; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.014; rss: 94MB	type collecting
time: 0.002; rss: 94MB	variance inference
time: 0.045; rss: 110MB	coherence checking
time: 0.027; rss: 112MB	wf checking (old)
time: 0.026; rss: 112MB	item-types checking
time: 0.527; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.087; rss: 127MB	wf checking (new)
time: 0.051; rss: 127MB	const checking
time: 0.009; rss: 127MB	privacy checking
time: 0.000; rss: 127MB	stability index
time: 0.004; rss: 127MB	intrinsic checking
time: 0.002; rss: 127MB	effect checking
time: 0.013; rss: 127MB	match checking
time: 0.060; rss: 144MB	MIR dump
time: 0.006; rss: 136MB	liveness checking
time: 0.073; rss: 135MB	borrow checking
time: 0.053; rss: 135MB	rvalue checking
time: 0.003; rss: 135MB	reachability checking
time: 0.007; rss: 135MB	death checking
time: 0.005; rss: 135MB	stability checking
time: 0.000; rss: 135MB	unused lib feature checking
time: 0.044; rss: 138MB	lint checking
time: 0.000; rss: 138MB	resolving dependency formats
time: 1.478; rss: 273MB	translation
  time: 0.102; rss: 174MB	llvm function passes [0]
  time: 0.053; rss: 175MB	llvm module passes [0]
  time: 1.675; rss: 218MB	codegen passes [0]
  time: 0.001; rss: 177MB	codegen passes [0]
time: 2.051; rss: 177MB	LLVM passes
time: 0.178; rss: 178MB	linking
done
