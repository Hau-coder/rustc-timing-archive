commit 8a3f5af8c98e123247a2847c52474f42874d23fa
Merge: 7b0f2af cb7d914
Author: bors <bors@rust-lang.org>
Date:   Tue Jun 9 18:26:26 2015 +0000

    Auto merge of #25995 - alexcrichton:msvc-md, r=brson
    
    On MSVC there are two ways that the CRT can be linked, either statically or
    dynamically. Each object file produced by the compiler is compiled against
    msvcrt (a dll) or libcmt (a static library). When the linker is dealing with
    more than one object file, it requires that all object files link to the same
    CRT, or else the linker will spit out some errors.
    
    For now, compile code with `-MD` as it seems to appear more often in C libraries
    so we'll stick with the same trend.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000 	parsing
time: 0.000 	configuration 1
time: 0.000 	recursion limit
time: 0.000 	gated macro checking
time: 0.000 	crate injection
time: 0.002 	macro loading
time: 0.000 	plugin loading
time: 0.000 	plugin registration
time: 0.001 	expansion
time: 0.000 	complete gated feature checking 1
time: 0.000 	configuration 2
time: 0.000 	maybe building test harness
time: 0.000 	prelude injection
time: 0.000 	checking that all macro invocations are gone
time: 0.000 	complete gated feature checking 2
time: 0.000 	assigning node ids and indexing ast
time: 0.000 	external crate/lib resolution
time: 0.000 	language item collection
time: 0.001 	resolution
time: 0.000 	lifetime resolution
time: 0.000 	looking for entry point
time: 0.000 	looking for plugin registrar
time: 0.000 	region resolution
time: 0.000 	loop checking
time: 0.000 	static item recursion checking
time: 0.000 	type collecting
time: 0.000 	variance inference
time: 0.001 	coherence checking
time: 0.001 	type checking
time: 0.000 	const checking
time: 0.000 	privacy checking
time: 0.000 	stability index
time: 0.000 	intrinsic checking
time: 0.000 	effect checking
time: 0.000 	match checking
time: 0.000 	liveness checking
time: 0.000 	borrow checking
time: 0.000 	rvalue checking
time: 0.000 	reachability checking
time: 0.000 	death checking
time: 0.000 	stability checking
time: 0.000 	unused lib feature checking
time: 0.000 	lint checking
time: 0.000 	resolving dependency formats
time: 0.003 	translation
  time: 0.000 	llvm function passes
  time: 0.000 	llvm module passes
  time: 0.001 	codegen passes
  time: 0.000 	codegen passes
time: 0.003 	LLVM passes
  time: 0.126 	running linker
time: 0.126 	linking
done
