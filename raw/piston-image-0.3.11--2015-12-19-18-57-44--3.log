commit abf60b20aa0edcae6d206905b1a1129e86dc60b3
Merge: cef0d0f 9fde3e9
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 19 23:21:12 2015 +0000

    Auto merge of #30430 - mmcco:master, r=alexcrichton
    
    Rust already supports Linux's getrandom(2), which is very similar and
    was based on getentropy(2). This is a pretty clean, simple addition that
    uses the same approach as the iOS randomness API support.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.044; rss: 47MB	parsing
time: 0.017; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.004; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.120; rss: 56MB	expansion
time: 0.004; rss: 56MB	complete gated feature checking 1
time: 0.027; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.013; rss: 56MB	maybe building test harness
time: 0.012; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 56MB	complete gated feature checking 2
time: 0.013; rss: 56MB	assigning node ids
time: 0.021; rss: 69MB	lowering ast -> hir
time: 0.006; rss: 72MB	indexing hir
time: 0.000; rss: 72MB	attribute checking
time: 0.007; rss: 72MB	early lint checks
time: 0.002; rss: 72MB	external crate/lib resolution
time: 0.001; rss: 72MB	language item collection
time: 0.028; rss: 95MB	resolution
time: 0.003; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.010; rss: 100MB	region resolution
time: 0.002; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.012; rss: 103MB	type collecting
time: 0.000; rss: 103MB	variance inference
time: 0.035; rss: 127MB	coherence checking
time: 0.134; rss: 129MB	wf checking
time: 0.052; rss: 131MB	item-types checking
time: 1.649; rss: 164MB	item-bodies checking
time: 0.000; rss: 164MB	drop-impl checking
time: 0.074; rss: 164MB	const checking
time: 0.012; rss: 164MB	privacy checking
time: 0.001; rss: 164MB	stability index
time: 0.010; rss: 164MB	intrinsic checking
time: 0.003; rss: 164MB	effect checking
time: 0.025; rss: 164MB	match checking
time: 0.096; rss: 177MB	MIR dump
time: 0.011; rss: 177MB	liveness checking
time: 0.151; rss: 177MB	borrow checking
time: 0.078; rss: 177MB	rvalue checking
time: 0.003; rss: 177MB	reachability checking
time: 0.009; rss: 177MB	death checking
time: 0.010; rss: 177MB	stability checking
time: 0.000; rss: 177MB	unused lib feature checking
time: 0.082; rss: 177MB	lint checking
time: 0.000; rss: 177MB	resolving dependency formats
time: 0.009; rss: 179MB	erasing regions from MIR
time: 2.948; rss: 295MB	translation
  time: 0.099; rss: 178MB	llvm function passes [0]
  time: 0.043; rss: 178MB	llvm module passes [0]
  time: 1.735; rss: 230MB	codegen passes [0]
  time: 0.001; rss: 197MB	codegen passes [0]
time: 2.081; rss: 197MB	LLVM passes
time: 0.154; rss: 197MB	linking
done
