commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.030; rss: 31MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.007; rss: 32MB	configuration 1
time: 0.000; rss: 32MB	recursion limit
time: 0.000; rss: 32MB	gated macro checking
time: 0.000; rss: 32MB	crate injection
time: 0.003; rss: 34MB	macro loading
time: 0.000; rss: 34MB	plugin loading
time: 0.000; rss: 34MB	plugin registration
time: 0.049; rss: 37MB	expansion
time: 0.001; rss: 37MB	complete gated feature checking 1
time: 0.008; rss: 37MB	configuration 2
time: 0.000; rss: 37MB	gated configuration checking
time: 0.004; rss: 37MB	maybe building test harness
time: 0.004; rss: 37MB	prelude injection
time: 0.000; rss: 37MB	checking that all macro invocations are gone
time: 0.000; rss: 37MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 37MB	complete gated feature checking 2
Post-expansion node count: 41783
time: 0.004; rss: 37MB	assigning node ids
time: 0.005; rss: 39MB	lowering ast -> hir
time: 0.002; rss: 39MB	indexing hir
time: 0.000; rss: 39MB	attribute checking
time: 0.002; rss: 39MB	early lint checks
time: 0.001; rss: 40MB	external crate/lib resolution
time: 0.000; rss: 40MB	language item collection
time: 0.012; rss: 48MB	resolution
time: 0.000; rss: 48MB	lifetime resolution
time: 0.000; rss: 48MB	looking for entry point
time: 0.000; rss: 48MB	looking for plugin registrar
time: 0.006; rss: 49MB	region resolution
time: 0.000; rss: 49MB	loop checking
time: 0.000; rss: 49MB	static item recursion checking
time: 0.005; rss: 49MB	type collecting
time: 0.000; rss: 49MB	variance inference
time: 0.020; rss: 70MB	coherence checking
time: 0.014; rss: 70MB	wf checking
time: 0.013; rss: 71MB	item-types checking
time: 0.209; rss: 84MB	item-bodies checking
time: 0.000; rss: 84MB	drop-impl checking
time: 0.012; rss: 84MB	const checking
time: 0.003; rss: 84MB	privacy checking
time: 0.000; rss: 84MB	stability index
time: 0.001; rss: 84MB	intrinsic checking
time: 0.000; rss: 84MB	effect checking
time: 0.006; rss: 84MB	match checking
time: 0.023; rss: 87MB	MIR dump
time: 0.002; rss: 87MB	liveness checking
time: 0.024; rss: 88MB	borrow checking
time: 0.007; rss: 88MB	rvalue checking
time: 0.000; rss: 88MB	reachability checking
time: 0.002; rss: 88MB	death checking
time: 0.002; rss: 88MB	stability checking
time: 0.000; rss: 88MB	unused lib feature checking
time: 0.022; rss: 89MB	lint checking
time: 0.000; rss: 89MB	resolving dependency formats
time: 0.002; rss: 89MB	erasing regions from MIR
time: 0.406; rss: 136MB	translation
  time: 0.028; rss: 104MB	llvm function passes [0]
  time: 0.063; rss: 106MB	llvm module passes [0]
  time: 0.561; rss: 128MB	codegen passes [0]
  time: 0.000; rss: 126MB	codegen passes [0]
time: 0.723; rss: 126MB	LLVM passes
time: 0.055; rss: 126MB	linking
done
