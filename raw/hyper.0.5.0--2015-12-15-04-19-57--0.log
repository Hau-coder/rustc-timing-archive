commit 9e63cecb10a3a22abed9c230c5daf268dc258bf3
Merge: 8f031bf 915cb37
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 15 04:21:53 2015 +0000

    Auto merge of #30233 - retep998:where-in-the-world-is-windows-sdk, r=alexcrichton
    
    What I've done here is try to make the code match what vcvars does much more closely. It now chooses which SDK to find based on the version of MSVC that it found. It also bases the decision of whether to find all the things on whether `VCINSTALLDIR` has been set, which is more likely to have only been set by an invocation of vcvars, unlike previously where it would do some things only if `LIB` wasn't set even though there was a valid use case for libraries to add themselves to `LIB` without having invoked vcvars.
    
    There are still some debug `println!`s so people can test the PR and make sure it works correctly on various setups.
    
    It supports VS 2015, 2013, and 2012. People who want to use versions of VS older (or newer) than that will have to manually invoke the appropriate vcvars bat file to set the proper environment variables themselves.
    
    Do not merge yet.
    
    Fixes https://github.com/rust-lang/rust/issues/30229
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling lazy_static v0.1.15
   Compiling typeable v0.1.2
   Compiling libc v0.2.2
   Compiling unicase v0.1.0
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.20
   Compiling winapi v0.2.5
   Compiling pkg-config v0.3.6
   Compiling httparse v0.1.6
   Compiling bitflags v0.3.3
   Compiling matches v0.1.2
   Compiling rustc-serialize v0.3.16
   Compiling libc v0.1.12
   Compiling advapi32-sys v0.1.2
   Compiling kernel32-sys v0.2.1
   Compiling log v0.3.4
   Compiling rand v0.3.12
   Compiling time v0.1.34
   Compiling num_cpus v0.2.10
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 39MB	parsing
time: 0.009; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.189; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.034; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
time: 0.010; rss: 57MB	assigning node ids
time: 0.011; rss: 61MB	lowering ast -> hir
time: 0.005; rss: 63MB	indexing hir
time: 0.000; rss: 63MB	attribute checking
time: 0.005; rss: 63MB	early lint checks
time: 0.003; rss: 66MB	external crate/lib resolution
time: 0.001; rss: 66MB	language item collection
time: 0.027; rss: 94MB	resolution
time: 0.002; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.006; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.013; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.038; rss: 119MB	coherence checking
time: 0.028; rss: 119MB	wf checking (old)
time: 0.027; rss: 119MB	item-types checking
time: 0.559; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.089; rss: 142MB	wf checking (new)
time: 0.043; rss: 142MB	const checking
time: 0.009; rss: 142MB	privacy checking
time: 0.001; rss: 142MB	stability index
time: 0.004; rss: 142MB	intrinsic checking
time: 0.002; rss: 142MB	effect checking
time: 0.012; rss: 142MB	match checking
time: 0.050; rss: 150MB	MIR dump
time: 0.006; rss: 150MB	liveness checking
time: 0.069; rss: 150MB	borrow checking
time: 0.034; rss: 150MB	rvalue checking
time: 0.003; rss: 150MB	reachability checking
time: 0.006; rss: 150MB	death checking
time: 0.005; rss: 150MB	stability checking
time: 0.000; rss: 150MB	unused lib feature checking
time: 0.046; rss: 150MB	lint checking
time: 0.000; rss: 150MB	resolving dependency formats
time: 0.010; rss: 155MB	erasing regions from MIR
time: 1.484; rss: 292MB	translation
  time: 0.102; rss: 186MB	llvm function passes [0]
  time: 0.051; rss: 187MB	llvm module passes [0]
  time: 1.694; rss: 231MB	codegen passes [0]
  time: 0.001; rss: 194MB	codegen passes [0]
time: 2.075; rss: 194MB	LLVM passes
time: 0.173; rss: 195MB	linking
done
