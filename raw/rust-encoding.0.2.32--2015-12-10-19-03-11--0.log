commit 7ce713961cb7c36bb66db70a276973eb78cf9e6e
Merge: 0d36840 5addc31
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 11 00:59:48 2015 +0000

    Auto merge of #30301 - michaelwoerister:mir-to-metadata2, r=nikomatsakis
    
    This PR makes `Mir` `RustcEncodable` and `RustcDecodable` and stores it in crate metadata for inlinable items.
    
    Some other things in here:
    - `mir::visit::Visitor` is extended to also visit `Literals`, `Spans` and `DefIds`.
    - It also adds `mir::visit::MutVisitor` which allows to mutate the visited `Mir` structure in place.
    - Some numbers on how big MIR is in metadata (total metadata size in bytes):
    
    |                | w/ MIR     | w/o MIR     | Rel. Size |
    |----------------|-----------:|------------:|:---------:|
    | libcore        | 17,695,473 |  14,263,377 |  124%     |
    | liblibc        | 411,440   |  404,382    | 102%      |
    | libcollections |  4,537,975 |   3,526,933 |   129%    |
    | libserialize   |  2,574,769 |   2,060,798 |   125%    |
    | libsyntax      | 15,262,894 |  12,075,574 |  126%     |
    | librustc       | 16,984,537 |  13,692,168 |  124%     |
    
    So, adding MIR to metadata makes it about 25% bigger. It could be worse, considering that it still uses the inefficient RBML encoding. Still, the question is whether we should put MIR emission behind a `-Z` flag.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 40MB	parsing
time: 0.006; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 44MB	macro loading
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.046; rss: 45MB	expansion
time: 0.001; rss: 45MB	complete gated feature checking 1
time: 0.008; rss: 45MB	configuration 2
time: 0.000; rss: 45MB	gated configuration checking
time: 0.004; rss: 45MB	maybe building test harness
time: 0.004; rss: 45MB	prelude injection
time: 0.000; rss: 45MB	checking that all macro invocations are gone
time: 0.000; rss: 45MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 45MB	complete gated feature checking 2
time: 0.004; rss: 45MB	assigning node ids
time: 0.005; rss: 49MB	lowering ast -> hir
time: 0.001; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.008; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.019; rss: 84MB	coherence checking
time: 0.007; rss: 84MB	wf checking (old)
time: 0.013; rss: 84MB	item-types checking
time: 0.198; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.018; rss: 96MB	wf checking (new)
time: 0.011; rss: 96MB	const checking
time: 0.002; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.000; rss: 96MB	effect checking
time: 0.006; rss: 96MB	match checking
time: 0.018; rss: 100MB	MIR dump
time: 0.002; rss: 100MB	liveness checking
time: 0.022; rss: 100MB	borrow checking
time: 0.006; rss: 100MB	rvalue checking
time: 0.000; rss: 100MB	reachability checking
time: 0.002; rss: 100MB	death checking
time: 0.001; rss: 100MB	stability checking
time: 0.000; rss: 100MB	unused lib feature checking
time: 0.017; rss: 100MB	lint checking
time: 0.000; rss: 100MB	resolving dependency formats
time: 0.002; rss: 100MB	erasing regions from MIR
time: 0.356; rss: 153MB	translation
  time: 0.027; rss: 112MB	llvm function passes [0]
  time: 0.063; rss: 115MB	llvm module passes [0]
  time: 0.581; rss: 136MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 0.742; rss: 134MB	LLVM passes
time: 0.054; rss: 133MB	linking
done
