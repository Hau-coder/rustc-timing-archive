commit 64b027764302aa67aa701a9f81bd938ca3d4052a
Merge: cc8d398 46068c9
Author: bors <bors@rust-lang.org>
Date:   Fri Oct 30 22:23:41 2015 +0000

    Auto merge of #29454 - stepancheg:vec-reserve, r=bluss
    
    Before this patch `reserve` function allocated twice as requested
    amount elements (not twice as capacity).  It leaded to unnecessary
    excessive memory usage in scenarios like this:
    
    ```
    let mut v = Vec::new();
    v.push(17);
    v.extend(0..10);
    println!("{}", v.capacity());
    ```
    
    `Vec` allocated 22 elements, while it could allocate just 11.
    
    `reserve` function must have a property of keeping `push` operation
    cost (which calls `reserve`) `O(1)`. To achieve this `reserve` must
    exponentialy grow its capacity when it does reallocation.
    
    There's better strategy to implement `reserve`:
    
    ```
    let new_capacity = max(current_capacity * 2, requested_capacity);
    ```
    
    This strategy still guarantees that capacity grows at `O(1)` with
    `reserve`, and fixes the issue with `extend`.
    
    Patch imlpements this strategy.
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes
    Updating git repository `https://github.com/reem/rust-mac`
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/servo/string-cache`
   Compiling winapi-build v0.1.1
   Compiling phf_shared v0.7.6
   Compiling winapi v0.2.4
   Compiling rustc-serialize v0.3.16
   Compiling lazy_static v0.1.15
   Compiling mac v0.0.2
   Compiling mac v0.0.2 (https://github.com/reem/rust-mac#6316d3f4)
   Compiling void v0.0.5
   Compiling libc v0.1.12
   Compiling unreachable v0.0.2
   Compiling debug_unreachable v0.0.6
   Compiling phf v0.7.6
   Compiling advapi32-sys v0.1.2
   Compiling kernel32-sys v0.1.4
   Compiling log v0.3.3
   Compiling rand v0.3.11
   Compiling time v0.1.33
   Compiling phf_generator v0.7.6
   Compiling phf_macros v0.7.6
   Compiling string_cache_shared v0.1.9 (https://github.com/servo/string-cache#e9f4c63e)
   Compiling string_cache_plugin v0.1.9 (https://github.com/servo/string-cache#e9f4c63e)
   Compiling string_cache v0.1.15 (https://github.com/servo/string-cache#e9f4c63e)
   Compiling num v0.1.27
   Compiling html5ever_macros v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
   Compiling serde v0.6.1
   Compiling html5ever v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
time: 0.018; rss: 39MB	parsing
time: 0.005; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.020; rss: 54MB	macro loading
time: 0.001; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 1.000; rss: 73MB	expansion
time: 0.004; rss: 73MB	complete gated feature checking 1
time: 0.026; rss: 73MB	configuration 2
time: 0.000; rss: 73MB	gated configuration checking
time: 0.014; rss: 73MB	maybe building test harness
time: 0.012; rss: 73MB	prelude injection
time: 0.002; rss: 73MB	checking that all macro invocations are gone
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 73MB	complete gated feature checking 2
time: 0.013; rss: 73MB	assigning node ids
time: 0.017; rss: 86MB	lowering ast -> hir
time: 0.007; rss: 90MB	indexing hir
time: 0.000; rss: 90MB	attribute checking
time: 0.009; rss: 90MB	early lint checks
time: 0.003; rss: 91MB	external crate/lib resolution
time: 0.003; rss: 91MB	language item collection
time: 0.032; rss: 107MB	resolution
time: 0.002; rss: 107MB	lifetime resolution
time: 0.000; rss: 107MB	looking for entry point
time: 0.001; rss: 107MB	looking for plugin registrar
time: 0.015; rss: 111MB	region resolution
time: 0.002; rss: 111MB	loop checking
time: 0.002; rss: 111MB	static item recursion checking
time: 0.008; rss: 113MB	type collecting
time: 0.003; rss: 113MB	variance inference
time: 0.037; rss: 131MB	coherence checking
time: 0.007; rss: 131MB	wf checking (old)
time: 0.320; rss: 165MB	item-types checking
time: 0.586; rss: 170MB	item-bodies checking
time: 0.000; rss: 170MB	drop-impl checking
time: 0.027; rss: 170MB	wf checking (new)
time: 0.075; rss: 173MB	const checking
time: 0.012; rss: 173MB	privacy checking
time: 0.001; rss: 173MB	stability index
time: 0.004; rss: 173MB	intrinsic checking
time: 0.003; rss: 173MB	effect checking
time: 0.027; rss: 173MB	match checking
time: 0.093; rss: 193MB	MIR dump
time: 0.012; rss: 183MB	liveness checking
time: 0.099; rss: 182MB	borrow checking
time: 0.039; rss: 182MB	rvalue checking
time: 0.003; rss: 182MB	reachability checking
time: 0.010; rss: 182MB	death checking
time: 0.007; rss: 182MB	stability checking
time: 0.000; rss: 182MB	unused lib feature checking
time: 0.053; rss: 182MB	lint checking
time: 0.000; rss: 182MB	resolving dependency formats
time: 0.467; rss: 227MB	translation
  time: 0.018; rss: 119MB	llvm function passes [0]
  time: 0.006; rss: 120MB	llvm module passes [0]
  time: 0.333; rss: 156MB	codegen passes [0]
  time: 0.001; rss: 131MB	codegen passes [0]
time: 0.415; rss: 131MB	LLVM passes
time: 0.059; rss: 131MB	linking
done
