commit 293966694c3c8e0c7028e8f54340fbc328d85bff
Merge: c0dc2cb 607b8c3
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 14 04:21:58 2015 +0000

    Auto merge of #28816 - petrochenkov:unistruct, r=nrc
    
    This patch uses the same data structures for structs and enum variants in AST and HIR. These changes in data structures lead to noticeable simplification in most of code dealing with them.
    I didn't touch the top level, i.e. `ItemStruct` is still `ItemStruct` and not `ItemEnum` with one variant, like in the type checker.
    As part of this patch, structures and variants get the `kind` field making distinction between "normal" structs, tuple structs and unit structs explicit instead of relying on the number of fields and presence of constructor `NodeId`. In particular, we can now distinguish empty tuple structs from unit structs, which was impossible before! Comprehensive tests for empty structs are added and some improvements to empty struct feature gates are made. Some tests don't pass due to issue https://github.com/rust-lang/rust/issues/28692 , they are still there for completeness, but are commented out.
    This patch fixes issue mentioned in https://github.com/rust-lang/rust/issues/16819#issuecomment-139509861, now emptiness of tuple structs is checked after expansion.
    It also touches https://github.com/rust-lang/rust/issues/28750 by providing span for visit_struct_def
    cc https://github.com/rust-lang/rust/pull/28336
    
    r? @nrc
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000; rss: 29MB	parsing
time: 0.000; rss: 29MB	configuration 1
time: 0.000; rss: 29MB	recursion limit
time: 0.000; rss: 33MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.001; rss: 35MB	expansion
time: 0.000; rss: 35MB	complete gated feature checking 1
time: 0.000; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.000; rss: 35MB	maybe building test harness
time: 0.000; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 35MB	complete gated feature checking 2
time: 0.000; rss: 35MB	assigning node ids
time: 0.000; rss: 35MB	lowering ast -> hir
time: 0.000; rss: 35MB	indexing hir
time: 0.000; rss: 35MB	attribute checking
time: 0.000; rss: 35MB	early lint checks
time: 0.001; rss: 38MB	external crate/lib resolution
time: 0.000; rss: 38MB	language item collection
time: 0.001; rss: 43MB	resolution
time: 0.000; rss: 43MB	lifetime resolution
time: 0.000; rss: 43MB	looking for entry point
time: 0.000; rss: 43MB	looking for plugin registrar
time: 0.000; rss: 43MB	region resolution
time: 0.000; rss: 43MB	loop checking
time: 0.000; rss: 43MB	static item recursion checking
time: 0.000; rss: 43MB	type collecting
time: 0.000; rss: 43MB	variance inference
time: 0.004; rss: 51MB	coherence checking
time: 0.000; rss: 51MB	wf checking (old)
time: 0.000; rss: 51MB	item-types checking
time: 0.000; rss: 51MB	item-bodies checking
time: 0.000; rss: 51MB	drop-impl checking
time: 0.000; rss: 51MB	wf checking (new)
time: 0.000; rss: 51MB	const checking
time: 0.000; rss: 51MB	privacy checking
time: 0.000; rss: 51MB	stability index
time: 0.000; rss: 51MB	intrinsic checking
time: 0.000; rss: 51MB	effect checking
time: 0.000; rss: 51MB	match checking
time: 0.000; rss: 51MB	MIR dump
time: 0.000; rss: 51MB	liveness checking
time: 0.000; rss: 51MB	borrow checking
time: 0.000; rss: 51MB	rvalue checking
time: 0.000; rss: 51MB	reachability checking
time: 0.000; rss: 51MB	death checking
time: 0.000; rss: 51MB	stability checking
time: 0.000; rss: 51MB	unused lib feature checking
time: 0.000; rss: 51MB	lint checking
time: 0.001; rss: 51MB	resolving dependency formats
time: 0.004; rss: 61MB	translation
  time: 0.000; rss: 64MB	llvm function passes
  time: 0.000; rss: 64MB	llvm module passes
  time: 0.001; rss: 65MB	codegen passes
  time: 0.000; rss: 65MB	codegen passes
time: 0.002; rss: 65MB	LLVM passes
  time: 0.085; rss: 71MB	running linker
time: 0.085; rss: 71MB	linking
done
