commit 9e63cecb10a3a22abed9c230c5daf268dc258bf3
Merge: 8f031bf 915cb37
Author: bors <bors@rust-lang.org>
Date:   Tue Dec 15 04:21:53 2015 +0000

    Auto merge of #30233 - retep998:where-in-the-world-is-windows-sdk, r=alexcrichton
    
    What I've done here is try to make the code match what vcvars does much more closely. It now chooses which SDK to find based on the version of MSVC that it found. It also bases the decision of whether to find all the things on whether `VCINSTALLDIR` has been set, which is more likely to have only been set by an invocation of vcvars, unlike previously where it would do some things only if `LIB` wasn't set even though there was a valid use case for libraries to add themselves to `LIB` without having invoked vcvars.
    
    There are still some debug `println!`s so people can test the PR and make sure it works correctly on various setups.
    
    It supports VS 2015, 2013, and 2012. People who want to use versions of VS older (or newer) than that will have to manually invoke the appropriate vcvars bat file to set the proper environment variables themselves.
    
    Do not merge yet.
    
    Fixes https://github.com/rust-lang/rust/issues/30229
rustc: ./html5ever-2015-05-15
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/reem/rust-mac`
    Updating git repository `https://github.com/servo/string-cache`
   Compiling winapi-build v0.1.1
   Compiling void v0.0.5
   Compiling phf_shared v0.7.9
   Compiling lazy_static v0.1.15
   Compiling rustc-serialize v0.3.16
   Compiling libc v0.2.2
   Compiling mac v0.0.2 (https://github.com/reem/rust-mac#6316d3f4)
   Compiling winapi v0.2.5
   Compiling unreachable v0.0.2
   Compiling debug_unreachable v0.0.6
   Compiling phf v0.7.9
   Compiling kernel32-sys v0.2.1
   Compiling advapi32-sys v0.1.2
   Compiling log v0.3.4
   Compiling rand v0.3.12
   Compiling time v0.1.34
   Compiling phf_generator v0.7.9
   Compiling string_cache_shared v0.1.12
   Compiling phf_macros v0.7.9
   Compiling string_cache v0.1.17
   Compiling html5ever_macros v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
   Compiling num v0.1.28
   Compiling serde v0.6.6
   Compiling html5ever v0.0.0 (file:///root/benchmarks/html5ever-2015-05-15)
time: 0.019; rss: 40MB	parsing
time: 0.006; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.021; rss: 56MB	macro loading
time: 0.001; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 2.379; rss: 77MB	expansion
time: 0.004; rss: 77MB	complete gated feature checking 1
time: 0.034; rss: 76MB	configuration 2
time: 0.000; rss: 76MB	gated configuration checking
time: 0.016; rss: 76MB	maybe building test harness
time: 0.015; rss: 76MB	prelude injection
time: 0.002; rss: 76MB	checking that all macro invocations are gone
time: 0.000; rss: 76MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 76MB	complete gated feature checking 2
time: 0.016; rss: 76MB	assigning node ids
time: 0.022; rss: 88MB	lowering ast -> hir
time: 0.006; rss: 94MB	indexing hir
time: 0.000; rss: 94MB	attribute checking
time: 0.009; rss: 94MB	early lint checks
time: 0.002; rss: 94MB	external crate/lib resolution
time: 0.002; rss: 94MB	language item collection
time: 0.024; rss: 110MB	resolution
time: 0.003; rss: 110MB	lifetime resolution
time: 0.000; rss: 110MB	looking for entry point
time: 0.000; rss: 110MB	looking for plugin registrar
time: 0.015; rss: 115MB	region resolution
time: 0.002; rss: 115MB	loop checking
time: 0.002; rss: 115MB	static item recursion checking
time: 0.007; rss: 118MB	type collecting
time: 0.000; rss: 118MB	variance inference
time: 0.031; rss: 140MB	coherence checking
time: 0.008; rss: 140MB	wf checking (old)
time: 0.343; rss: 174MB	item-types checking
time: 0.611; rss: 182MB	item-bodies checking
time: 0.000; rss: 182MB	drop-impl checking
time: 0.028; rss: 182MB	wf checking (new)
time: 0.077; rss: 182MB	const checking
time: 0.014; rss: 182MB	privacy checking
time: 0.002; rss: 182MB	stability index
time: 0.004; rss: 182MB	intrinsic checking
time: 0.003; rss: 182MB	effect checking
time: 0.028; rss: 182MB	match checking
time: 0.061; rss: 188MB	MIR dump
time: 0.012; rss: 192MB	liveness checking
time: 0.098; rss: 194MB	borrow checking
time: 0.035; rss: 194MB	rvalue checking
time: 0.003; rss: 194MB	reachability checking
time: 0.008; rss: 194MB	death checking
time: 0.008; rss: 194MB	stability checking
time: 0.000; rss: 194MB	unused lib feature checking
time: 0.069; rss: 194MB	lint checking
time: 0.000; rss: 194MB	resolving dependency formats
time: 0.006; rss: 194MB	erasing regions from MIR
time: 0.545; rss: 246MB	translation
  time: 0.019; rss: 128MB	llvm function passes [0]
  time: 0.007; rss: 129MB	llvm module passes [0]
  time: 0.343; rss: 165MB	codegen passes [0]
  time: 0.002; rss: 141MB	codegen passes [0]
time: 0.425; rss: 141MB	LLVM passes
time: 0.060; rss: 141MB	linking
done
