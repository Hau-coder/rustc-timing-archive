commit 6a6b97cf025b8a1fb92fc48a4dc06611d2970861
Merge: 6827661 c1ad5af
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 20 18:13:10 2015 +0000

    Auto merge of #29822 - petrochenkov:pubexport, r=alexcrichton
    
    This patch implements the plan described in https://internals.rust-lang.org/t/privacy-and-its-interaction-with-docs-lints-and-stability/2880 with one deviation.
    
    It turns out, that rustdoc needs the "directly public" set for its docs inlining logic, so the privacy pass have to produce three sets and not two. Three is arguably too many, so I merged them in one map:
    `public_items/exported_items/reachable_items: NodeSet => access_levels: NodeMap<AccessLevel>`
    
    r? @alexcrichton
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.021; rss: 39MB	parsing
time: 0.006; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.042; rss: 43MB	expansion
time: 0.001; rss: 43MB	complete gated feature checking 1
time: 0.007; rss: 43MB	configuration 2
time: 0.000; rss: 43MB	gated configuration checking
time: 0.003; rss: 43MB	maybe building test harness
time: 0.003; rss: 43MB	prelude injection
time: 0.000; rss: 43MB	checking that all macro invocations are gone
time: 0.000; rss: 43MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 43MB	complete gated feature checking 2
time: 0.003; rss: 43MB	assigning node ids
time: 0.003; rss: 47MB	lowering ast -> hir
time: 0.002; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.010; rss: 58MB	resolution
time: 0.000; rss: 58MB	lifetime resolution
time: 0.000; rss: 58MB	looking for entry point
time: 0.000; rss: 58MB	looking for plugin registrar
time: 0.002; rss: 58MB	region resolution
time: 0.000; rss: 58MB	loop checking
time: 0.000; rss: 58MB	static item recursion checking
time: 0.005; rss: 58MB	type collecting
time: 0.000; rss: 58MB	variance inference
time: 0.019; rss: 78MB	coherence checking
time: 0.006; rss: 78MB	wf checking (old)
time: 0.012; rss: 78MB	item-types checking
time: 0.199; rss: 90MB	item-bodies checking
time: 0.000; rss: 90MB	drop-impl checking
time: 0.018; rss: 90MB	wf checking (new)
time: 0.011; rss: 90MB	const checking
time: 0.002; rss: 90MB	privacy checking
time: 0.000; rss: 90MB	stability index
time: 0.001; rss: 90MB	intrinsic checking
time: 0.000; rss: 90MB	effect checking
time: 0.006; rss: 90MB	match checking
time: 0.019; rss: 97MB	MIR dump
time: 0.002; rss: 97MB	liveness checking
time: 0.022; rss: 97MB	borrow checking
time: 0.006; rss: 97MB	rvalue checking
time: 0.000; rss: 97MB	reachability checking
time: 0.002; rss: 97MB	death checking
time: 0.001; rss: 97MB	stability checking
time: 0.000; rss: 97MB	unused lib feature checking
time: 0.016; rss: 99MB	lint checking
time: 0.000; rss: 99MB	resolving dependency formats
time: 0.002; rss: 99MB	erasing regions from MIR
time: 0.340; rss: 147MB	translation
  time: 0.027; rss: 104MB	llvm function passes [0]
  time: 0.062; rss: 106MB	llvm module passes [0]
  time: 0.575; rss: 128MB	codegen passes [0]
  time: 0.001; rss: 126MB	codegen passes [0]
time: 0.738; rss: 126MB	LLVM passes
time: 0.056; rss: 125MB	linking
done
