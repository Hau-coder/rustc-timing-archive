commit 0250ff9a5f1347f3177516e178fd8382d48169c7
Merge: 014a5c1 7b464d3
Author: bors <bors@rust-lang.org>
Date:   Wed Jun 17 00:44:25 2015 +0000

    Auto merge of #22681 - mzabaluev:extend-faster, r=huonw
    
    Instead of a fast branch with a sized iterator falling back to a potentially poorly optimized iterate-and-push loop, a single efficient loop can serve all cases.
    
    In my benchmark runs, I see some good gains, but also some regressions, possibly due to different inlining choices by the compiler. YMMV.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030 	parsing
time: 0.010 	configuration 1
time: 0.000 	recursion limit
time: 0.000 	gated macro checking
time: 0.000 	crate injection
time: 0.003 	macro loading
time: 0.000 	plugin loading
time: 0.000 	plugin registration
time: 0.197 	expansion
time: 0.005 	complete gated feature checking 1
time: 0.032 	configuration 2
time: 0.013 	maybe building test harness
time: 0.011 	prelude injection
time: 0.001 	checking that all macro invocations are gone
time: 0.002 	complete gated feature checking 2
time: 0.013 	assigning node ids and indexing ast
time: 0.002 	external crate/lib resolution
time: 0.002 	language item collection
time: 0.036 	resolution
time: 0.002 	lifetime resolution
time: 0.000 	looking for entry point
time: 0.001 	looking for plugin registrar
time: 0.008 	region resolution
time: 0.002 	loop checking
time: 0.001 	static item recursion checking
time: 0.012 	type collecting
time: 0.002 	variance inference
time: 0.104 	coherence checking
time: 1.020 	type checking
time: 0.073 	const checking
time: 0.011 	privacy checking
time: 0.000 	stability index
time: 0.004 	intrinsic checking
time: 0.002 	effect checking
time: 0.014 	match checking
time: 0.006 	liveness checking
time: 0.096 	borrow checking
time: 0.068 	rvalue checking
time: 0.002 	reachability checking
time: 0.008 	death checking
time: 0.010 	stability checking
time: 0.000 	unused lib feature checking
time: 0.042 	lint checking
time: 0.000 	resolving dependency formats
time: 2.179 	translation
  time: 0.093 	llvm function passes
  time: 0.049 	llvm module passes
  time: 1.959 	codegen passes
  time: 0.002 	codegen passes
time: 2.337 	LLVM passes
time: 0.195 	linking
done
