commit 6e2a64b57a74f35bef215972adf1b803cff288bd
Merge: c1035b3 34dc0e0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 30 01:07:19 2015 +0000

    Auto merge of #29974 - brson:gold, r=alexcrichton
    
    When using `cc` for linking rustc will, if gold is available (by looking for `/usr/bin/ld.gold`), pass `-fuse-ld=gold` to `cc`.
    
    In some scenarios gold links much faster than ld. Servo uses it to considerably speed up linking. gold behaves nearly identically to ld (though I think there are rare corner cases that don't work still). I've run this through crater and everything there continues to link.
    
    To disable, pass `-C disable-gold`.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling matches v0.1.2
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.21
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.4
   Compiling libc v0.1.12
   Compiling pkg-config v0.3.6
   Compiling unicase v0.1.0
   Compiling rustc-serialize v0.3.16
   Compiling bitflags v0.3.3
   Compiling winapi v0.2.5
   Compiling httparse v0.1.6
   Compiling advapi32-sys v0.1.2
   Compiling kernel32-sys v0.2.1
   Compiling lazy_static v0.1.15
   Compiling typeable v0.1.2
   Compiling log v0.3.4
   Compiling rand v0.3.12
   Compiling time v0.1.34
   Compiling num_cpus v0.2.10
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.041; rss: 30MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 31MB	configuration 1
time: 0.000; rss: 31MB	recursion limit
time: 0.000; rss: 31MB	gated macro checking
time: 0.000; rss: 31MB	crate injection
time: 0.004; rss: 36MB	macro loading
time: 0.000; rss: 36MB	plugin loading
time: 0.000; rss: 36MB	plugin registration
time: 0.211; rss: 46MB	expansion
time: 0.005; rss: 46MB	complete gated feature checking 1
time: 0.035; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.014; rss: 46MB	maybe building test harness
time: 0.011; rss: 46MB	prelude injection
time: 0.001; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 46MB	complete gated feature checking 2
Post-expansion node count: 109258
time: 0.011; rss: 46MB	assigning node ids
time: 0.019; rss: 51MB	lowering ast -> hir
time: 0.011; rss: 53MB	indexing hir
time: 0.000; rss: 53MB	attribute checking
time: 0.005; rss: 53MB	early lint checks
time: 0.004; rss: 48MB	external crate/lib resolution
time: 0.001; rss: 48MB	language item collection
time: 0.042; rss: 72MB	resolution
time: 0.002; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.007; rss: 75MB	region resolution
time: 0.001; rss: 75MB	loop checking
time: 0.001; rss: 75MB	static item recursion checking
time: 0.014; rss: 81MB	type collecting
time: 0.000; rss: 81MB	variance inference
time: 0.047; rss: 101MB	coherence checking
time: 0.066; rss: 102MB	wf checking
time: 0.026; rss: 103MB	item-types checking
time: 0.545; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.049; rss: 122MB	const checking
time: 0.010; rss: 122MB	privacy checking
time: 0.001; rss: 122MB	stability index
time: 0.004; rss: 122MB	intrinsic checking
time: 0.002; rss: 122MB	effect checking
time: 0.013; rss: 122MB	match checking
time: 0.059; rss: 126MB	MIR dump
time: 0.006; rss: 126MB	liveness checking
time: 0.075; rss: 126MB	borrow checking
time: 0.036; rss: 127MB	rvalue checking
time: 0.003; rss: 127MB	reachability checking
time: 0.006; rss: 127MB	death checking
time: 0.007; rss: 127MB	stability checking
time: 0.000; rss: 127MB	unused lib feature checking
time: 0.046; rss: 127MB	lint checking
time: 0.000; rss: 127MB	resolving dependency formats
time: 0.011; rss: 128MB	erasing regions from MIR
time: 1.655; rss: 266MB	translation
  time: 0.097; rss: 168MB	llvm function passes [0]
  time: 0.051; rss: 168MB	llvm module passes [0]
  time: 1.641; rss: 213MB	codegen passes [0]
  time: 0.001; rss: 168MB	codegen passes [0]
time: 2.022; rss: 165MB	LLVM passes
time: 0.189; rss: 167MB	linking
done
