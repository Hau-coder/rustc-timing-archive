commit e819d8aa3cd2319fa57e7336e167069ef7002d6a
Merge: 64c21f9 0ca2a9e
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 7 02:16:13 2015 +0000

    Auto merge of #30247 - bluss:revert-array-clone, r=alexcrichton
    
    Revert "PR #30130 Implement `Clone` for more arrays"
    
    This reverts commit e22a64e8d8d4da46c74f878ce1c23ad1c88982e8.
    
    This caused a regression such that types like `[[u8; 256]; 4]`
    no longer implemented Clone. This previously worked due to Clone
    for `[T; N]` (N in 0 to 32) being implemented for T: Copy.
    
    Due to fixed size arrays not implementing Clone for sizes above 32,
    the new implementation requiring T: Clone would not allow
    `[[u8; 256]; 4]` to be Clone.
    
    Fixes #30244
    
    Due to changing back, this is technically a [breaking-change],
    albeit for a behavior that existed for a very short time.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.055; rss: 46MB	parsing
time: 0.011; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.001; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 49MB	macro loading
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.059; rss: 52MB	expansion
time: 0.001; rss: 52MB	complete gated feature checking 1
time: 0.013; rss: 52MB	configuration 2
time: 0.000; rss: 52MB	gated configuration checking
time: 0.006; rss: 52MB	maybe building test harness
time: 0.006; rss: 52MB	prelude injection
time: 0.000; rss: 52MB	checking that all macro invocations are gone
time: 0.000; rss: 52MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 52MB	complete gated feature checking 2
time: 0.007; rss: 52MB	assigning node ids
time: 0.008; rss: 60MB	lowering ast -> hir
time: 0.002; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.004; rss: 62MB	early lint checks
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.010; rss: 71MB	resolution
time: 0.001; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.005; rss: 75MB	region resolution
time: 0.001; rss: 75MB	loop checking
time: 0.001; rss: 75MB	static item recursion checking
time: 0.004; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.021; rss: 95MB	coherence checking
time: 0.005; rss: 95MB	wf checking (old)
time: 0.087; rss: 99MB	item-types checking
time: 0.205; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.010; rss: 111MB	wf checking (new)
time: 0.027; rss: 114MB	const checking
time: 0.004; rss: 114MB	privacy checking
time: 0.000; rss: 114MB	stability index
time: 0.001; rss: 114MB	intrinsic checking
time: 0.001; rss: 114MB	effect checking
time: 0.003; rss: 114MB	match checking
time: 0.014; rss: 116MB	MIR dump
time: 0.003; rss: 118MB	liveness checking
time: 0.020; rss: 118MB	borrow checking
time: 0.007; rss: 118MB	rvalue checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.028; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.002; rss: 118MB	erasing regions from MIR
time: 0.654; rss: 185MB	translation
  time: 0.039; rss: 115MB	llvm function passes [0]
  time: 0.020; rss: 116MB	llvm module passes [0]
  time: 0.628; rss: 142MB	codegen passes [0]
  time: 0.001; rss: 129MB	codegen passes [0]
time: 0.766; rss: 129MB	LLVM passes
time: 0.067; rss: 128MB	linking
done
