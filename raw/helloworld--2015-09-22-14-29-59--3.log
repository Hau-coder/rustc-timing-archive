commit 9c1aaeb7b97e34b6688f31c6921d636d27c02e73
Merge: 2a6f6f2 428bb16
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 22 19:13:39 2015 +0000

    Auto merge of #28543 - gandro:netbsd, r=alexcrichton
    
    These changes introduce the ability to cross-compile working binaries for NetBSD/amd64. Previous support added in PR #26682 shared all its code with the OpenBSD implementation, and was therefore never functional (e.g. linking against non-existing symbols and using wrong type definitions). Nonetheless, the previous patches were a great starting point and made my work significantly easier. :smiley:
    
    Because there are no stage0 snapshots for NetBSD (yet), I used a cross-compiler for NetBSD 7.0 RC3 and only tested some toy programs (threading and channels, stack guards, a small TCP/IP echo server and some other platform dependent bits). If someone could point me to documentation on how to generate a stage0 snapshot from a cross-compiler I'm happy to run the full test suite.
    
    A few other notes regarding Rust on NetBSD/amd64:
    - To preserve binary compatibility, NetBSD introduces new symbols for system call wrappers on breaking ABI changes and keeps the old (legacy) symbols around, see [this documentation](https://www.netbsd.org/docs/internals/en/chap-processes.html#syscalls_master) for some details. I went ahead and modified the `libc` and `std` crate to use the current (renamed) symbols instead of the legacy ones where I found them, but I might have missed some. Notably using the `sigaction` symbol (deprecated in 1998) instead of `__sigaction14` even triggers SIGSYS (bad syscall) on my amd64 setup. I also changed the type definitions to use the most recent version.
    - NetBSD's gdb doesn't really support position independent executables, so you might want to turn that off for debugging, see [NetBSD Problem Report #48250](https://gnats.netbsd.org/48250).
    - For binaries invoked using a relative path, NetBSD supports `$ORIGIN` only for short `rpath`s (~64 chars or so, I'm told). If running an executable fails with `execname not specified in AUX vector: No such file or directory`, consider invoking the binary using its full absolute path.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc -Ztime-passes hello.rs
time: 0.000; rss: 29MB	parsing
time: 0.000; rss: 29MB	configuration 1
time: 0.000; rss: 29MB	recursion limit
time: 0.000; rss: 29MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.002; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.001; rss: 35MB	expansion
time: 0.000; rss: 35MB	complete gated feature checking 1
time: 0.000; rss: 35MB	configuration 2
time: 0.000; rss: 35MB	gated configuration checking
time: 0.000; rss: 35MB	maybe building test harness
time: 0.000; rss: 35MB	prelude injection
time: 0.000; rss: 35MB	checking that all macro invocations are gone
time: 0.000; rss: 35MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 35MB	complete gated feature checking 2
time: 0.000; rss: 35MB	assigning node ids
time: 0.000; rss: 35MB	lowering ast -> hir
time: 0.000; rss: 35MB	indexing hir
time: 0.000; rss: 35MB	early lint checks
time: 0.001; rss: 35MB	external crate/lib resolution
time: 0.000; rss: 35MB	language item collection
time: 0.001; rss: 44MB	resolution
time: 0.000; rss: 44MB	lifetime resolution
time: 0.000; rss: 44MB	looking for entry point
time: 0.000; rss: 44MB	looking for plugin registrar
time: 0.000; rss: 44MB	region resolution
time: 0.000; rss: 44MB	loop checking
time: 0.000; rss: 44MB	static item recursion checking
time: 0.000; rss: 44MB	type collecting
time: 0.000; rss: 44MB	variance inference
time: 0.004; rss: 52MB	coherence checking
time: 0.000; rss: 52MB	wf checking (old)
time: 0.000; rss: 52MB	item-types checking
time: 0.000; rss: 52MB	item-bodies checking
time: 0.000; rss: 52MB	drop-impl checking
time: 0.000; rss: 52MB	wf checking (new)
time: 0.000; rss: 52MB	MIR dump
time: 0.000; rss: 52MB	const checking
time: 0.000; rss: 52MB	privacy checking
time: 0.000; rss: 52MB	stability index
time: 0.000; rss: 52MB	intrinsic checking
time: 0.000; rss: 52MB	effect checking
time: 0.000; rss: 52MB	match checking
time: 0.000; rss: 52MB	liveness checking
time: 0.000; rss: 52MB	borrow checking
time: 0.000; rss: 52MB	rvalue checking
time: 0.000; rss: 52MB	reachability checking
time: 0.000; rss: 52MB	death checking
time: 0.000; rss: 52MB	stability checking
time: 0.000; rss: 52MB	unused lib feature checking
time: 0.000; rss: 52MB	lint checking
time: 0.001; rss: 52MB	resolving dependency formats
time: 0.004; rss: 63MB	translation
  time: 0.000; rss: 65MB	llvm function passes
  time: 0.000; rss: 65MB	llvm module passes
  time: 0.001; rss: 67MB	codegen passes
  time: 0.000; rss: 67MB	codegen passes
time: 0.002; rss: 67MB	LLVM passes
  time: 0.086; rss: 73MB	running linker
time: 0.086; rss: 73MB	linking
done
