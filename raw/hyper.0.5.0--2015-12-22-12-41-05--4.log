commit 45e52dadb8548dcbe8da91fe624dd991b4994e70
Merge: 42c3ef8 9bff8b0
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 23 00:42:19 2015 +0000

    Auto merge of #30353 - alexcrichton:rpath-by-default, r=brson
    
    This commit changes our distribution and in-tree sources to pass the `-C rpath`
    flag by default during compiles. This means that from-source builds, including
    our release channels, will have this option enabled as well. Motivated
    by #29941, this change means that the compiler should be usable as-is on all
    platforms just after extraction or installation. This experience is already true
    on Windows but on Unixes you still need to set up LD_LIBRARY_PATH or the
    equivalent, which can often be unfortunate.
    
    This option was originally turned off by default for Linux distributions who
    tend to take care of these sorts of details themselves, so it is expected that
    all those builds of Rust will want to pass `--disable-rpath` to the configure
    script to preserve that behavior.
    
    Closes #29941
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 39MB	parsing
time: 0.010; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.004; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.191; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.034; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
time: 0.010; rss: 57MB	assigning node ids
time: 0.011; rss: 61MB	lowering ast -> hir
time: 0.005; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.005; rss: 66MB	early lint checks
time: 0.003; rss: 69MB	external crate/lib resolution
time: 0.001; rss: 69MB	language item collection
time: 0.026; rss: 95MB	resolution
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.014; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.038; rss: 124MB	coherence checking
time: 0.064; rss: 126MB	wf checking
time: 0.026; rss: 126MB	item-types checking
time: 0.507; rss: 145MB	item-bodies checking
time: 0.000; rss: 145MB	drop-impl checking
time: 0.042; rss: 147MB	const checking
time: 0.008; rss: 147MB	privacy checking
time: 0.001; rss: 147MB	stability index
time: 0.004; rss: 147MB	intrinsic checking
time: 0.002; rss: 147MB	effect checking
time: 0.013; rss: 147MB	match checking
time: 0.049; rss: 149MB	MIR dump
time: 0.006; rss: 151MB	liveness checking
time: 0.069; rss: 151MB	borrow checking
time: 0.035; rss: 154MB	rvalue checking
time: 0.003; rss: 154MB	reachability checking
time: 0.005; rss: 154MB	death checking
time: 0.006; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.045; rss: 154MB	lint checking
time: 0.000; rss: 154MB	resolving dependency formats
time: 0.007; rss: 154MB	erasing regions from MIR
time: 1.476; rss: 295MB	translation
  time: 0.100; rss: 181MB	llvm function passes [0]
  time: 0.052; rss: 182MB	llvm module passes [0]
  time: 1.673; rss: 226MB	codegen passes [0]
  time: 0.001; rss: 183MB	codegen passes [0]
time: 2.049; rss: 183MB	LLVM passes
time: 0.176; rss: 181MB	linking
done
